CCS PCD C Compiler, Version 5.051, 5967               07-Thg12-18 18:41

               Filename:   D:\Thiet ke dien tu\Mach thiet ke\Lap trinh\Du an nam 2018\Discovery\main.lst

               ROM used:   5786 bytes (7%)
                           Largest free fragment is 59750
               RAM used:   258 (2%) at main() level
                           276 (2%) worst case
               Stack used: 38 locations
               Stack size: 128

*
00000:  GOTO    14F0
.................... #include <System.c> 
.................... #include <main.h> 
.................... #include <33FJ128MC710.h> 
.................... //////////// Standard Header file for the DSPIC33FJ128MC710 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device DSPIC33FJ128MC710 
*
00200:  CLR     32
00202:  MOV     #20C,W3
00204:  ADD     W3,W0,W0
00206:  TBLRDL.B[W0],W0L
00208:  CLR.B   1
0020A:  RETURN  
0020C:  DATA    43,4F,00
0020E:  DATA    4E,4E,00
00210:  DATA    45,43,00
00212:  DATA    54,20,00
00214:  DATA    43,4F,00
00216:  DATA    4D,50,00
00218:  DATA    55,54,00
0021A:  DATA    45,52,00
0021C:  DATA    00,00,00
0021E:  CLR     32
00220:  MOV     #22A,W3
00222:  ADD     W3,W0,W0
00224:  TBLRDL.B[W0],W0L
00226:  CLR.B   1
00228:  RETURN  
0022A:  DATA    2E,2E,00
0022C:  DATA    2E,2E,00
0022E:  DATA    2E,2E,00
00230:  DATA    2E,2E,00
00232:  DATA    2E,2E,00
00234:  DATA    2E,2E,00
00236:  DATA    2E,2E,00
00238:  DATA    2E,2E,00
0023A:  DATA    00,00,00
0023C:  CLR     32
0023E:  MOV     #248,W3
00240:  ADD     W3,W0,W0
00242:  TBLRDL.B[W0],W0L
00244:  CLR.B   1
00246:  RETURN  
00248:  DATA    2D,4C,00
0024A:  DATA    4F,43,00
0024C:  DATA    41,4C,00
0024E:  DATA    20,43,00
00250:  DATA    4F,4E,00
00252:  DATA    54,52,00
00254:  DATA    4F,4C,00
00256:  DATA    20,2D,00
00258:  DATA    00,00,00
0025A:  CLR     32
0025C:  MOV     #266,W3
0025E:  ADD     W3,W0,W0
00260:  TBLRDL.B[W0],W0L
00262:  CLR.B   1
00264:  RETURN  
00266:  DATA    53,45,00
00268:  DATA    54,55,00
0026A:  DATA    50,20,00
0026C:  DATA    50,53,00
0026E:  DATA    20,4F,00
00270:  DATA    4E,2F,00
00272:  DATA    4F,46,00
00274:  DATA    46,3A,00
00276:  DATA    00,00,00
00278:  CLR     32
0027A:  MOV     #284,W3
0027C:  ADD     W3,W0,W0
0027E:  TBLRDL.B[W0],W0L
00280:  CLR.B   1
00282:  RETURN  
00284:  DATA    50,4F,00
00286:  DATA    57,45,00
00288:  DATA    52,3A,00
0028A:  DATA    20,4F,00
0028C:  DATA    46,46,00
0028E:  DATA    20,20,00
00290:  DATA    20,20,00
00292:  DATA    20,20,00
00294:  DATA    20,20,00
00296:  DATA    00,00,00
00298:  CLR     32
0029A:  MOV     #2A4,W3
0029C:  ADD     W3,W0,W0
0029E:  TBLRDL.B[W0],W0L
002A0:  CLR.B   1
002A2:  RETURN  
002A4:  DATA    50,4F,00
002A6:  DATA    57,45,00
002A8:  DATA    52,3A,00
002AA:  DATA    20,4F,00
002AC:  DATA    4E,20,00
002AE:  DATA    20,20,00
002B0:  DATA    20,20,00
002B2:  DATA    20,20,00
002B4:  DATA    20,20,00
002B6:  DATA    00,00,00
002B8:  CLR     32
002BA:  MOV     #2C4,W3
002BC:  ADD     W3,W0,W0
002BE:  TBLRDL.B[W0],W0L
002C0:  CLR.B   1
002C2:  RETURN  
002C4:  DATA    41,4D,00
002C6:  DATA    45,54,00
002C8:  DATA    45,52,00
002CA:  DATA    20,49,00
002CC:  DATA    31,3A,00
002CE:  DATA    20,25,00
002D0:  DATA    64,2E,00
002D2:  DATA    25,64,00
002D4:  DATA    25,64,00
002D6:  DATA    41,00,00
002D8:  CLR     32
002DA:  MOV     #2E4,W3
002DC:  ADD     W3,W0,W0
002DE:  TBLRDL.B[W0],W0L
002E0:  CLR.B   1
002E2:  RETURN  
002E4:  DATA    41,4D,00
002E6:  DATA    45,54,00
002E8:  DATA    45,52,00
002EA:  DATA    20,49,00
002EC:  DATA    31,3A,00
002EE:  DATA    2D,25,00
002F0:  DATA    64,2E,00
002F2:  DATA    25,64,00
002F4:  DATA    25,64,00
002F6:  DATA    41,00,00
002F8:  CLR     32
002FA:  MOV     #304,W3
002FC:  ADD     W3,W0,W0
002FE:  TBLRDL.B[W0],W0L
00300:  CLR.B   1
00302:  RETURN  
00304:  DATA    41,4D,00
00306:  DATA    45,54,00
00308:  DATA    45,52,00
0030A:  DATA    20,49,00
0030C:  DATA    32,3A,00
0030E:  DATA    20,25,00
00310:  DATA    64,2E,00
00312:  DATA    25,64,00
00314:  DATA    25,64,00
00316:  DATA    41,00,00
00318:  CLR     32
0031A:  MOV     #324,W3
0031C:  ADD     W3,W0,W0
0031E:  TBLRDL.B[W0],W0L
00320:  CLR.B   1
00322:  RETURN  
00324:  DATA    41,4D,00
00326:  DATA    45,54,00
00328:  DATA    45,52,00
0032A:  DATA    20,49,00
0032C:  DATA    32,3A,00
0032E:  DATA    2D,25,00
00330:  DATA    64,2E,00
00332:  DATA    25,64,00
00334:  DATA    25,64,00
00336:  DATA    41,00,00
*
00D3E:  MOV     W5,[W15++]
00D40:  MOV     #C,W5
00D42:  REPEAT  #3
00D44:  MOV     [W5++],[W15++]
00D46:  MOV     #0,W9
00D48:  BTSC.B  43.0
00D4A:  MOV     #1,W9
00D4C:  MOV     W9,[W15++]
00D4E:  CLR     W4
00D50:  CLR     W5
00D52:  CLR     W6
00D54:  CLR     W7
00D56:  XOR     W2,W3,W8
00D58:  BRA     Z,D7C
00D5A:  MOV     #20,W8
00D5C:  BCLR.B  42.0
00D5E:  RLC     W0,W0
00D60:  RLC     W1,W1
00D62:  RLC     W4,W4
00D64:  RLC     W5,W5
00D66:  CP      W5,W3
00D68:  BRA     NZ,D6C
00D6A:  CPB     W4,W2
00D6C:  BRA     NC,D74
00D6E:  SUB     W4,W2,W4
00D70:  SUBB    W5,W3,W5
00D72:  BSET.B  42.0
00D74:  RLC     W6,W6
00D76:  RLC     W7,W7
00D78:  DEC     W8,W8
00D7A:  BRA     NZ,D5C
00D7C:  MOV     W7,W1
00D7E:  MOV     W6,W0
00D80:  MOV     [--W15],W9
00D82:  CP0     W9
00D84:  BRA     Z,D88
00D86:  MOV.D   W4,W0
00D88:  MOV     #12,W5
00D8A:  REPEAT  #3
00D8C:  MOV     [--W15],[W5--]
00D8E:  MOV     [--W15],W5
00D90:  RETURN  
*
00E18:  MOV     W5,[W15++]
00E1A:  MOV     #C,W5
00E1C:  REPEAT  #3
00E1E:  MOV     [W5++],[W15++]
00E20:  MOV     W0,W4
00E22:  MOV     W1,W5
00E24:  MOV     W2,W6
00E26:  MOV     W3,W7
00E28:  CLR     W0
00E2A:  CLR     W1
00E2C:  CLR     W2
00E2E:  CLR     W3
00E30:  BCLR    W8.0
00E32:  BTSS    W7.F
00E34:  BRA     E46
00E36:  BSET    W8.0
00E38:  COM     W7,W7
00E3A:  COM     W6,W6
00E3C:  COM     W5,W5
00E3E:  NEG     W4,W4
00E40:  ADDC    W5,#0,W5
00E42:  ADDC    W6,#0,W6
00E44:  ADDC    W7,#0,W7
00E46:  IOR      W4,  W5,W9
00E48:  BRA     NZ,E4E
00E4A:  IOR      W6,  W7,W9
00E4C:  BRA     Z,E78
00E4E:  MOV     #473,W9
00E50:  BTSC    W3.4
00E52:  BRA     E6A
00E54:  BCLR.B  42.0
00E56:  RLC     W4,W4
00E58:  RLC     W5,W5
00E5A:  RLC     W6,W6
00E5C:  RLC     W7,W7
00E5E:  RLC     W0,W0
00E60:  RLC     W1,W1
00E62:  RLC     W2,W2
00E64:  RLC     W3,W3
00E66:  DEC     W9,W9
00E68:  BRA     NZ,E50
00E6A:  SL      W9,#4,W9
00E6C:  BCLR.B  42.0
00E6E:  BCLR    W9.F
00E70:  BCLR    W3.4
00E72:  XOR     W9,W3,W3
00E74:  BTSC    W8.0
00E76:  BSET    W3.F
00E78:  MOV     #12,W5
00E7A:  REPEAT  #3
00E7C:  MOV     [--W15],[W5--]
00E7E:  MOV     [--W15],W5
00E80:  RETURN  
00E82:  MOV     W8,[W15++]
00E84:  MOV     #12,W8
00E86:  REPEAT  #4
00E88:  MOV     [W8++],[W15++]
00E8A:  XOR     W3,W7,W13
00E8C:  MOV     W3,W8
00E8E:  MOV     W7,W9
00E90:  MOV     #7FF,W10
00E92:  BCLR.B  42.0
00E94:  BCLR.B  42.1
00E96:  ASR     W8,#4,W8
00E98:  AND     W10,W8,W8
00E9A:  CP0     W8
00E9C:  BRA     Z,F76
00E9E:  BCLR.B  42.0
00EA0:  BCLR.B  42.1
00EA2:  ASR     W9,#4,W9
00EA4:  AND     W10,W9,W9
00EA6:  CP0     W9
00EA8:  BRA     Z,F76
00EAA:  CLR     W10
00EAC:  SUB     W8,W9,W12
00EAE:  BRA     NC,EB6
00EB0:  ADD     #3FF,W12
00EB2:  BRA     C,F76
00EB4:  BRA     EBE
00EB6:  MOV     #401,W11
00EB8:  SUB     W12,W11,W12
00EBA:  BRA     NC,F76
00EBC:  BRA     Z,F76
00EBE:  CLR     W8
00EC0:  CLR     W9
00EC2:  CLR     W10
00EC4:  CLR     W11
00EC6:  AND     #1F,W3
00EC8:  BSET    W3.4
00ECA:  AND     #1F,W7
00ECC:  BSET    W7.4
00ECE:  MOV     W12,[W15++]
00ED0:  MOV     #36,W12
00ED2:  SUB     W0,W4,W0
00ED4:  SUBB    W1,W5,W1
00ED6:  SUBB    W2,W6,W2
00ED8:  SUBB    W3,W7,W3
00EDA:  BRA     N,EE0
00EDC:  BRA     C,EEA
00EDE:  BRA     NZ,EEC
00EE0:  ADD     W0,W4,W0
00EE2:  ADDC    W1,W5,W1
00EE4:  ADDC    W2,W6,W2
00EE6:  ADDC    W3,W7,W3
00EE8:  BRA     EEC
00EEA:  BSET    W8.0
00EEC:  DEC     W12,W12
00EEE:  BRA     Z,F06
00EF0:  BCLR.B  42.0
00EF2:  RLC     W0,W0
00EF4:  RLC     W1,W1
00EF6:  RLC     W2,W2
00EF8:  RLC     W3,W3
00EFA:  BCLR.B  42.0
00EFC:  RLC     W8,W8
00EFE:  RLC     W9,W9
00F00:  RLC     W10,W10
00F02:  RLC     W11,W11
00F04:  BRA     ED2
00F06:  MOV     [--W15],W12
00F08:  BTSC    W11.5
00F0A:  BRA     F0E
00F0C:  BRA     F1A
00F0E:  BCLR.B  42.0
00F10:  RRC     W11,W11
00F12:  RRC     W10,W10
00F14:  RRC     W9,W9
00F16:  RRC     W8,W8
00F18:  BRA     F20
00F1A:  DEC     W12,W12
00F1C:  BCLR.B  42.0
00F1E:  BRA     Z,F76
00F20:  BTSC.B  42.0
00F22:  BRA     F36
00F24:  RLC     W0,W0
00F26:  RLC     W1,W1
00F28:  RLC     W2,W2
00F2A:  RLC     W3,W3
00F2C:  SUB     W0,W4,W4
00F2E:  SUBB    W1,W5,W5
00F30:  SUBB    W2,W6,W6
00F32:  SUBB    W3,W7,W7
00F34:  BRA     NC,F60
00F36:  INC     W8,W8
00F38:  BRA     NZ,F60
00F3A:  INC     W9,W9
00F3C:  BRA     NZ,F60
00F3E:  INC     W10,W10
00F40:  BRA     NZ,F60
00F42:  INC     W11,W11
00F44:  BRA     NZ,F60
00F46:  INC     W12,W12
00F48:  BRA     Z,F76
00F4A:  BRA     F60
00F4C:  DEC     W12,W12
00F4E:  BRA     Z,F76
00F50:  BTSC    W11.4
00F52:  BRA     F60
00F54:  BCLR.B  42.0
00F56:  RLC     W8,W8
00F58:  RLC     W9,W9
00F5A:  RLC     W10,W10
00F5C:  RLC     W11,W11
00F5E:  BRA     F50
00F60:  SL      W12,#4,W12
00F62:  BCLR.B  42.0
00F64:  BCLR    W12.F
00F66:  BTSC    W13.F
00F68:  BSET    W12.F
00F6A:  BCLR    W11.4
00F6C:  XOR     W12,W11,W3
00F6E:  MOV     W10,W2
00F70:  MOV     W9,W1
00F72:  MOV     W8,W0
00F74:  BRA     F80
00F76:  MOV     #0,W0
00F78:  MOV     #0,W1
00F7A:  MOV     #0,W2
00F7C:  MOV     #0,W3
00F7E:  BRA     F80
00F80:  MOV     #1A,W8
00F82:  REPEAT  #4
00F84:  MOV     [--W15],[W8--]
00F86:  MOV     [--W15],W8
00F88:  RETURN  
00F8A:  MOV     W5,[W15++]
00F8C:  MOV     #C,W5
00F8E:  REPEAT  #5
00F90:  MOV     [W5++],[W15++]
00F92:  MOV     W3,W8
00F94:  MOV     W2,W7
00F96:  MOV     W1,W6
00F98:  MOV     W0,W5
00F9A:  MOV     W3,W9
00F9C:  MOV     #473,W11
00F9E:  ASR     W3,#4,W3
00FA0:  MOV     #7FF,W10
00FA2:  AND     W10,W3,W3
00FA4:  SUB     W11,W3,W11
00FA6:  AND     #1F,W8
00FA8:  BSET    W8.4
00FAA:  CLR     W0
00FAC:  CLR     W1
00FAE:  CLR     W2
00FB0:  CLR     W3
00FB2:  BCLR.B  42.0
00FB4:  RRC     W8,W8
00FB6:  RRC     W7,W7
00FB8:  RRC     W6,W6
00FBA:  RRC     W5,W5
00FBC:  RRC     W3,W3
00FBE:  RRC     W2,W2
00FC0:  RRC     W1,W1
00FC2:  RRC     W0,W0
00FC4:  DEC     W11,W11
00FC6:  BRA     NZ,FB2
00FC8:  BTSS    W9.F
00FCA:  BRA     FDE
00FCC:  COM     W0,W0
00FCE:  COM     W1,W1
00FD0:  COM     W2,W2
00FD2:  COM     W3,W3
00FD4:  INC     W0,W0
00FD6:  ADDC    #0,W1
00FD8:  ADDC    #0,W2
00FDA:  ADDC    #0,W3
00FDC:  BRA     FDE
00FDE:  MOV     #16,W5
00FE0:  REPEAT  #5
00FE2:  MOV     [--W15],[W5--]
00FE4:  MOV     [--W15],W5
00FE6:  RETURN  
00FE8:  MOV     W5,[W15++]
00FEA:  MOV     #C,W5
00FEC:  REPEAT  #3
00FEE:  MOV     [W5++],[W15++]
00FF0:  BTSS    W0.F
00FF2:  BRA     1010
00FF4:  NEG     W0,W0
00FF6:  BSET    W4.8
00FF8:  BTSS    W4.F
00FFA:  BRA     1010
00FFC:  MOV     W0,[W15++]
00FFE:  MOV     #2D,W0
01000:  MOV     W4,[W15++]
01002:  MOV     W0,886
01004:  CALL    D2C
01008:  MOV     [--W15],W4
0100A:  MOV     [--W15],W0
0100C:  BCLR    W4.8
0100E:  DEC.B   0008
01010:  CLR     W5
01012:  MOV     W0,W7
01014:  MOV     W4,W9
01016:  BCLR    W4.F
01018:  CP0.B   W4L
0101A:  BRA     NZ,1028
0101C:  BTSC    W9.F
0101E:  BRA     1024
01020:  MOV     #0,W5
01022:  BRA     1050
01024:  MOV     #0,W5
01026:  BRA     1050
01028:  BTSS    W9.8
0102A:  SUB.B   W4L,#6,W5L
0102C:  BTSC    W9.8
0102E:  SUB.B   W4L,#7,W5L
01030:  BRA     NC,104E
01032:  MOV     #30,W0
01034:  BTSS    W9.F
01036:  MOV     #20,W0
01038:  MOV     W0,[W15++]
0103A:  MOV     W4,[W15++]
0103C:  MOV     W0,886
0103E:  CALL    D2C
01042:  MOV     [--W15],W4
01044:  MOV     [--W15],W0
01046:  DEC     W5,W5
01048:  BRA     NN,1038
0104A:  MOV     #5,W5
0104C:  BRA     1050
0104E:  MOV     W4,W5
01050:  MOV     #6,W4
01052:  BTSC    W5.8
01054:  INC     W4,W4
01056:  BSET    W5.E
01058:  BTSC    W9.F
0105A:  BSET    W5.F
0105C:  MOV     #2710,W8
0105E:  REPEAT  #11
01060:  DIV.U   W7,W8
01062:  CALL    10B2
01066:  MOV     W1,W7
01068:  MOV     #3E8,W8
0106A:  REPEAT  #11
0106C:  DIV.U   W7,W8
0106E:  CALL    10B2
01072:  MOV     W1,W7
01074:  MOV     #64,W8
01076:  REPEAT  #11
01078:  DIV.U   W7,W8
0107A:  CALL    10B2
0107E:  MOV     W1,W7
01080:  MOV     #A,W8
01082:  REPEAT  #11
01084:  DIV.U   W7,W8
01086:  CALL    10B2
0108A:  BTSS    W9.8
0108C:  BRA     10A0
0108E:  MOV     #2D,W0
01090:  MOV     W1,[W15++]
01092:  MOV     W4,[W15++]
01094:  MOV     W0,886
01096:  CALL    D2C
0109A:  MOV     [--W15],W4
0109C:  MOV     [--W15],W1
0109E:  BCLR    W9.8
010A0:  MOV     #30,W0
010A2:  ADD.B   W1L,W0L,W0L
010A4:  MOV     W0,2A
010A6:  MOV     W4,[W15++]
010A8:  MOV     W0,886
010AA:  CALL    D2C
010AE:  MOV     [--W15],W4
010B0:  BRA     1102
010B2:  MOV     #30,W6
010B4:  CP0     W0
010B6:  BRA     NZ,10D4
010B8:  BTSS    W5.E
010BA:  BRA     10F0
010BC:  DEC     W4,W4
010BE:  CP.B    W4L,W5L
010C0:  BRA     Z,10C6
010C2:  BTSC.B  42.0
010C4:  RETURN  
010C6:  CP0     W0
010C8:  BRA     NZ,10D4
010CA:  BTSS    W5.E
010CC:  BRA     10F0
010CE:  BTSS    W5.F
010D0:  MOV     #20,W6
010D2:  BRA     10F0
010D4:  BCLR    W5.E
010D6:  BTSS    W9.8
010D8:  BRA     10F0
010DA:  MOV     W0,W10
010DC:  MOV     #2D,W0
010DE:  MOV     W1,[W15++]
010E0:  MOV     W4,[W15++]
010E2:  MOV     W0,886
010E4:  CALL    D2C
010E8:  MOV     [--W15],W4
010EA:  MOV     [--W15],W1
010EC:  BCLR    W9.8
010EE:  MOV     W10,W0
010F0:  ADD.B   W6L,W0L,W0L
010F2:  MOV     W1,[W15++]
010F4:  MOV     W4,[W15++]
010F6:  MOV     W0,886
010F8:  CALL    D2C
010FC:  MOV     [--W15],W4
010FE:  MOV     [--W15],W1
01100:  RETURN  
01102:  MOV     #12,W5
01104:  REPEAT  #3
01106:  MOV     [--W15],[W5--]
01108:  MOV     [--W15],W5
0110A:  RETURN  
....................  
.................... #list 
....................  
.................... #device adc = 12 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOWRTB                   //Boot block not write protected                
.................... #FUSES NORSS                    //No secure segment RAM 
.................... #FUSES NOWRTSS                  //Secure segment not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES PR                       //Primary Oscillator 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
.................... #FUSES NOPWMPIN                 //PWM outputs drive active state upon Reset 
.................... #FUSES NOJTAG                   //JTAG disabled 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
....................  
.................... #use delay(crystal=20000000) 
*
00338:  CP0     W0
0033A:  BTSC.B  42.1
0033C:  BRA     346
0033E:  REPEAT  #270B
00340:  NOP     
00342:  DEC     W0,W0
00344:  BRA     NZ,33E
00346:  RETURN  
....................  
....................  
.................... #include <Lcd4bit.c> 
.................... #include <Lcd4bit.h> 
.................... #define LCD_RS   PIN_B5 
.................... #define LCD_RW   PIN_B6 
.................... #define LCD_E    PIN_B7  
....................  
.................... #define LCD_D4   PIN_B8  
.................... #define LCD_D5   PIN_B9   
.................... #define LCD_D6   PIN_B10 
.................... #define LCD_D7   PIN_B11   
....................  
.................... void lcd_enable(void); 
.................... void lcd_send_4bit_data ( unsigned char cX ); 
.................... void lcd_send_command (unsigned char cX ); 
.................... void lcd_init (void ); 
.................... void lcd_gotoxy(unsigned char x, unsigned char y); 
.................... void lcd_clear(void); 
.................... void lcd_putchar ( unsigned int16 cX ); 
.................... void lcd_puts (char *s); 
.................... void lcd_putcharInt(unsigned int16 val); 
....................  
....................  
....................  
.................... // Ham Khoi Tao LCD 
....................  void lcd_enable(void) 
.................... { 
....................    output_high(LCD_E);    
*
003A2:  BCLR.B  2C6.7
003A4:  BSET.B  2CA.7
....................    delay_us(20);        
003A6:  REPEAT  #C6
003A8:  NOP     
....................    output_low(LCD_E); 
003AA:  BCLR.B  2C6.7
003AC:  BCLR.B  2CA.7
....................    delay_us(20);     
003AE:  REPEAT  #C6
003B0:  NOP     
003B2:  RETURN  
.................... } 
.................... // -------------------------------------------------- 
.................... // Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void lcd_send_4bit_data ( unsigned char cX ) 
*
00348:  MOV     W5,[W15++]
.................... { 
....................    output_bit(LCD_D4,cX & 0x01);  
0034A:  MOV.B   88E,W0L
0034C:  CLR.B   1
0034E:  AND     W0,#1,W0
00350:  CP0     W0
00352:  BRA     NZ,358
00354:  BCLR.B  2CB.0
00356:  BRA     35A
00358:  BSET.B  2CB.0
0035A:  BCLR.B  2C7.0
....................    output_bit(LCD_D5,(cX>>1)&1); 
0035C:  MOV     88E,W5
0035E:  CLR.B   B
00360:  CLR.B   B
00362:  LSR     W5,#1,W5
00364:  AND     W5,#1,W0
00366:  CP0     W0
00368:  BRA     NZ,36E
0036A:  BCLR.B  2CB.1
0036C:  BRA     370
0036E:  BSET.B  2CB.1
00370:  BCLR.B  2C7.1
....................    output_bit(LCD_D6,(cX>>2)&1); 
00372:  MOV     88E,W5
00374:  CLR.B   B
00376:  CLR.B   B
00378:  LSR     W5,#2,W5
0037A:  AND     W5,#1,W0
0037C:  CP0     W0
0037E:  BRA     NZ,384
00380:  BCLR.B  2CB.2
00382:  BRA     386
00384:  BSET.B  2CB.2
00386:  BCLR.B  2C7.2
....................    output_bit(LCD_D7,(cX>>3)&1); 
00388:  MOV     88E,W5
0038A:  CLR.B   B
0038C:  CLR.B   B
0038E:  LSR     W5,#3,W5
00390:  AND     W5,#1,W0
00392:  CP0     W0
00394:  BRA     NZ,39A
00396:  BCLR.B  2CB.3
00398:  BRA     39C
0039A:  BSET.B  2CB.3
0039C:  BCLR.B  2C7.3
0039E:  MOV     [--W15],W5
003A0:  RETURN  
.................... } 
....................  
.................... // -------------------------------------------------- 
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void lcd_send_command (unsigned char cX ) 
*
003B4:  MOV     W5,[W15++]
.................... { 
....................    lcd_send_4bit_data ( cX >>4 );       // send 4 bit high   
003B6:  MOV     88A,W5
003B8:  CLR.B   B
003BA:  CLR.B   B
003BC:  LSR     W5,#4,W5
003BE:  PUSH    88E
003C0:  MOV.B   W5L,[W15-#2]
003C2:  POP     88E
003C4:  CALL    348
....................    lcd_enable() ; 
003C8:  CALL    3A2
....................    lcd_send_4bit_data ( cX  );                // send 4 bit low   
003CC:  MOV.B   88A,W0L
003CE:  MOV.B   W0L,88E
003D0:  CALL    348
....................    lcd_enable() ; 
003D4:  CALL    3A2
003D8:  MOV     [--W15],W5
003DA:  RETURN  
.................... } 
....................  
.................... // -------------------------------------------------- 
.................... // Ham Khoi Tao LCD 
....................  void lcd_init ( void ) 
.................... { 
....................    //lcd_send_4bit_data ( 0x00 ); 
....................    //delay_ms(200); 
....................     
....................    output_low(LCD_RS);    
003DC:  BCLR.B  2C6.5
003DE:  BCLR.B  2CA.5
....................    output_low(LCD_RW); 
003E0:  BCLR.B  2C6.6
003E2:  BCLR.B  2CA.6
....................    output_low(LCD_E);                                                   // che do gui lenh 
003E4:  BCLR.B  2C6.7
003E6:  BCLR.B  2CA.7
....................     
....................    lcd_send_4bit_data ( 0x03 );          // ket noi 8 bit 
003E8:  MOV.B   #3,W0L
003EA:  MOV.B   W0L,88E
003EC:  CALL    348
....................    lcd_enable() ; 
003F0:  CALL    3A2
....................    lcd_enable() ; 
003F4:  CALL    3A2
....................    lcd_enable() ; 
003F8:  CALL    3A2
....................    lcd_send_4bit_data ( 0x02 );               // ket noi 4 bit 
003FC:  MOV.B   #2,W0L
003FE:  MOV.B   W0L,88E
00400:  CALL    348
....................    lcd_enable() ; 
00404:  CALL    3A2
....................     
....................    lcd_send_command( 0x28 );                  
00408:  MOV.B   #28,W0L
0040A:  MOV.B   W0L,88A
0040C:  CALL    3B4
....................    lcd_send_command( 0x06 ); 
00410:  MOV.B   #6,W0L
00412:  MOV.B   W0L,88A
00414:  CALL    3B4
....................    lcd_send_command( 0x0c );                    
00418:  MOV.B   #C,W0L
0041A:  MOV.B   W0L,88A
0041C:  CALL    3B4
....................    lcd_send_command( 0x01 );                   
00420:  MOV.B   #1,W0L
00422:  MOV.B   W0L,88A
00424:  CALL    3B4
....................    lcd_send_command( 0x08 );          
00428:  MOV.B   #8,W0L
0042A:  MOV.B   W0L,88A
0042C:  CALL    3B4
00430:  RETURN  
.................... } 
....................  
.................... // -------------------------------------------------- 
.................... // Ham Thiet Lap Vi Tri Con Tro 
.................... void lcd_gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(y == 0)address = (0x80+x); 
*
00CE2:  CP0.B   87F
00CE4:  BRA     NZ,CEC
00CE6:  MOV     #80,W0
00CE8:  ADD.B   87E,W0L
00CEA:  MOV.B   W0L,880
....................   if(y == 1)address = (0xc0+x); 
00CEC:  MOV     87E,W4
00CEE:  LSR     W4,#8,W4
00CF0:  CP.B    W4L,#1
00CF2:  BRA     NZ,CFA
00CF4:  MOV     #C0,W0
00CF6:  ADD.B   87E,W0L
00CF8:  MOV.B   W0L,880
....................   if(y == 2)address = (0x94+x); 
00CFA:  MOV     87E,W4
00CFC:  LSR     W4,#8,W4
00CFE:  CP.B    W4L,#2
00D00:  BRA     NZ,D08
00D02:  MOV     #94,W0
00D04:  ADD.B   87E,W0L
00D06:  MOV.B   W0L,880
....................   if(y == 3)address = (0xd4+x); 
00D08:  MOV     87E,W4
00D0A:  LSR     W4,#8,W4
00D0C:  CP.B    W4L,#3
00D0E:  BRA     NZ,D16
00D10:  MOV     #D4,W0
00D12:  ADD.B   87E,W0L
00D14:  MOV.B   W0L,880
....................   delay_ms(3); 
00D16:  REPEAT  #352E
00D18:  NOP     
00D1A:  REPEAT  #3FFF
00D1C:  NOP     
....................   lcd_send_command(address); 
00D1E:  MOV.B   880,W0L
00D20:  MOV.B   W0L,88A
00D22:  CALL    3B4
....................   delay_ms(1); 
00D26:  REPEAT  #270E
00D28:  NOP     
00D2A:  RETURN  
.................... } 
.................... // -------------------------------------------------- 
.................... // Ham Xoa Man Hinh LCD 
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_command(0x01);   
....................   //delay_us(300); 
.................... } 
....................  
.................... // -------------------------------------------------- 
.................... // Ham Gui 1 Ky Tu Len LCD 
....................  void lcd_putchar ( unsigned int16 cX ) 
.................... { 
....................      output_high(LCD_RS);    
00D2C:  BCLR.B  2C6.5
00D2E:  BSET.B  2CA.5
....................      lcd_send_command( cX ); 
00D30:  MOV.B   886,W0L
00D32:  MOV.B   W0L,88A
00D34:  CALL    3B4
....................      output_low(LCD_RS); 
00D38:  BCLR.B  2C6.5
00D3A:  BCLR.B  2CA.5
00D3C:  RETURN  
.................... } 
....................  
.................... // -------------------------------------------------- 
.................... void lcd_putcharInt(unsigned int16 val) 
.................... { 
....................    unsigned char i, j, num[5]; 
....................    i = 0; 
....................    while(val > 9) 
....................    { 
....................       num[i] = val%10 + 0x30; 
....................       val = val/10; 
....................       i++; 
....................    } 
....................    num[i] = val + 0x30; 
....................    for(j = 0; j <= i; j++) 
....................    { 
....................  
....................       lcd_putchar(num[i - j]); 
....................    } 
.................... } 
.................... // Ham Gui 1 Chuoi Ky Tu Len LCD 
.................... void lcd_puts(char *s) 
.................... { 
....................    while (*s) 
....................    { 
....................          lcd_putchar(*s); 
....................       s++; 
....................    } 
.................... } 
....................  
....................  
.................... #define Add_SW1   PIN_A3 
.................... #define Add_SW2   PIN_A4 
.................... #define Add_SW3   PIN_A5 
.................... #define Add_SW4   PIN_A6 
.................... #define Dat_SW    PIN_A7 
.................... #define Crt_SW    PIN_F8 
....................  
.................... #define Add_Led1  PIN_A10 
.................... #define Add_Led2  PIN_A9 
.................... #define Add_Led3  PIN_A14 
.................... #define Add_Led4  PIN_A15 
....................  
.................... #define Dat_Led   PIN_B1 
....................  
.................... #define Seg7_A1   PIN_G2 
.................... #define Seg7_A2   PIN_G3 
.................... #define Seg7_A3   PIN_G6 
.................... #define Seg7_A4   PIN_G7 
....................  
.................... #define Seg7_B1   PIN_F12 
.................... #define Seg7_B2   PIN_F13 
.................... #define Seg7_B3   PIN_G0 
.................... #define Seg7_B4   PIN_G1 
....................  
.................... #define PX        PIN_D0 
.................... #define PY        PIN_D1 
.................... #define PULSEA    PIN_G9 
.................... #define PULSEA_   PIN_G8 
.................... #define PULSEB    PIN_C13 
.................... #define PULSEB_   PIN_C14 
....................  
.................... #define ON_5V     PIN_E6 
.................... #define ON_12V    PIN_E7 
.................... #define ON_5V_    PIN_E8 
.................... #define ON_12V_   PIN_E9 
....................  
.................... #define LED1      PIN_D2 
.................... #define LED2      PIN_D3 
.................... #define LED3      PIN_D4 
.................... #define LED4      PIN_D5 
.................... #define LED5      PIN_D6 
.................... #define LED6      PIN_D7 
.................... #define LED7      PIN_D8 
.................... #define LED8      PIN_D9 
....................  
.................... #define MD  PIN_G14 
.................... #define UP  PIN_G15 
.................... #define DW  PIN_G12 
.................... #define EX  PIN_G13 
....................  
.................... unsigned char data_switch = 0; 
.................... unsigned char data_singled = 0; 
.................... unsigned char data_seg7_led1 = 0; 
.................... unsigned char data_seg7_led2 = 0; 
.................... unsigned char dat1 = 0,dat2 = 0,dat3 = 0; 
.................... unsigned char data = 0; 
....................  
.................... unsigned char power_on_5V = 1; 
.................... unsigned char power_on_12V = 1; 
.................... unsigned char power_on_5V_ = 1; 
.................... unsigned char power_on_12V_ = 1; 
.................... unsigned char power_on = 1; 
....................  
.................... unsigned char re_local = 0; 
.................... unsigned char setup_mode = 0; 
.................... unsigned int16 val_adc1 = 0,val_adc2 = 0; 
.................... unsigned int16 curren_displayA = 0,curren_displayB = 0; 
.................... unsigned char flag_currA = 0,flag_currB = 0; 
....................  
.................... unsigned int32 M[25]; 
....................  
.................... void Switch_control (unsigned char flag); 
.................... void Single_Seg7_led_read (void); 
.................... void Main_init (void); 
.................... void Pulse_switch (unsigned char flag); 
.................... void Control_supply (unsigned char flag); 
.................... unsigned char Check_connect_computer (void); 
.................... void control_button (void); 
.................... unsigned int16 multi_read_adc (unsigned int8 channel,unsigned int16 samling); 
.................... Void Read_current (void); 
....................  
.................... void Main_init (void) 
.................... { 
....................    set_tris_A(0xFFFF); 
*
00432:  SETM    2C0
....................    set_tris_B(0x000C); 
00434:  MOV     #C,W4
00436:  MOV     W4,2C6
....................    set_tris_C(0x901F); 
00438:  MOV     #901F,W4
0043A:  MOV     W4,2CC
....................    set_tris_E(0x003F); 
0043C:  MOV     #3F,W4
0043E:  MOV     W4,2D8
....................    set_tris_F(0xFF00); 
00440:  MOV     #FF00,W4
00442:  MOV     W4,2DE
....................    set_tris_D(0xFFFF); 
00444:  SETM    2D2
....................    set_tris_G(0xFCFF); 
00446:  MOV     #FCFF,W4
00448:  MOV     W4,2E4
....................    output_A(0x0000); 
0044A:  CLR     2C0
0044C:  CLR     2C4
....................    delay_ms(50); 
0044E:  MOV     #32,W0
00450:  CALL    338
....................    lcd_init(); 
00454:  CALL    3DC
....................    delay_ms(50); 
00458:  MOV     #32,W0
0045A:  CALL    338
....................    setup_adc(ADC_CLOCK_DIV_8|ADC_TAD_MUL_8); 
0045E:  MOV     #807,W4
00460:  MOV     W4,324
00462:  MOV     #84E0,W4
00464:  MOV     W4,320
....................    setup_adc_ports(sAN18|sAN19|VSS_VDD); 
00466:  SETM    32C
00468:  MOV     #FFF3,W4
0046A:  MOV     W4,32A
0046C:  CLR     322
0046E:  RETURN  
.................... } 
....................  
.................... int1 check_bit = 1; 
.................... void main() 
*
014F0:  MOV     #4780,W15
014F2:  MOV     #47FF,W0
014F4:  MOV     W0,20
014F6:  NOP     
014F8:  BSET.B  81.7
014FA:  CLR.B   800
014FC:  CLR.B   801
014FE:  CLR.B   802
01500:  CLR.B   803
01502:  CLR.B   804
01504:  CLR.B   805
01506:  CLR.B   806
01508:  CLR.B   807
0150A:  MOV.B   #1,W0L
0150C:  MOV.B   W0L,808
0150E:  MOV.B   #1,W0L
01510:  MOV.B   W0L,809
01512:  MOV.B   #1,W0L
01514:  MOV.B   W0L,80A
01516:  MOV.B   #1,W0L
01518:  MOV.B   W0L,80B
0151A:  MOV.B   #1,W0L
0151C:  MOV.B   W0L,80C
0151E:  CLR.B   80D
01520:  CLR.B   80E
01522:  CLR     810
01524:  CLR     812
01526:  CLR     814
01528:  CLR     816
0152A:  CLR.B   80F
0152C:  CLR.B   818
0152E:  BSET.B  819.0
01530:  SETM    32C
01532:  SETM    32A
01534:  SETM    36C
01536:  SETM    36A
.................... { 
....................    Main_init(); 
01538:  CALL    432
....................    while(TRUE) 
....................    {   
....................       data_singled = (input_D() >> 2)&0x00FF; 
0153C:  SETM    2D2
0153E:  MOV     2D4,W5
01540:  LSR     W5,#2,W5
01542:  MOV     W5,W4
01544:  MOV.B   W4L,W0L
01546:  MOV.B   W0L,801
....................       data_seg7_led1 = input(Seg7_A1) + input(Seg7_A2)*2 + input(Seg7_A3)*4 + input(Seg7_A4)*8; 
01548:  BSET.B  2E4.2
0154A:  CLR     W0
0154C:  BTSC.B  2E6.2
0154E:  INC     W0,W0
01550:  MOV.B   W0L,W5L
01552:  BSET.B  2E4.3
01554:  CLR     W0
01556:  BTSC.B  2E6.3
01558:  INC     W0,W0
0155A:  CLR.B   1
0155C:  SL      W0,#1,W0
0155E:  ZE      W5,W5
01560:  ADD     W0,W5,W5
01562:  BSET.B  2E4.6
01564:  CLR     W0
01566:  BTSC.B  2E6.6
01568:  INC     W0,W0
0156A:  CLR.B   1
0156C:  SL      W0,#2,W0
0156E:  ADD     W0,W5,W5
01570:  BSET.B  2E4.7
01572:  CLR     W0
01574:  BTSC.B  2E6.7
01576:  INC     W0,W0
01578:  CLR.B   1
0157A:  SL      W0,#3,W0
0157C:  ADD.B   W0L,W5L,W0L
0157E:  MOV.B   W0L,802
....................       data_seg7_led2 = input(Seg7_B1) + input(Seg7_B2)*2 + input(Seg7_B3)*4 + input(Seg7_B4)*8; 
01580:  BSET.B  2DF.4
01582:  CLR     W0
01584:  BTSC.B  2E1.4
01586:  INC     W0,W0
01588:  MOV.B   W0L,W5L
0158A:  BSET.B  2DF.5
0158C:  CLR     W0
0158E:  BTSC.B  2E1.5
01590:  INC     W0,W0
01592:  CLR.B   1
01594:  SL      W0,#1,W0
01596:  ZE      W5,W5
01598:  ADD     W0,W5,W5
0159A:  BSET.B  2E4.0
0159C:  CLR     W0
0159E:  BTSC.B  2E6.0
015A0:  INC     W0,W0
015A2:  CLR.B   1
015A4:  SL      W0,#2,W0
015A6:  ADD     W0,W5,W5
015A8:  BSET.B  2E4.1
015AA:  CLR     W0
015AC:  BTSC.B  2E6.1
015AE:  INC     W0,W0
015B0:  CLR.B   1
015B2:  SL      W0,#3,W0
015B4:  ADD.B   W0L,W5L,W0L
015B6:  MOV.B   W0L,803
....................       check_bit = Check_connect_computer(); 
015B8:  CALL    470
015BC:  BCLR.B  819.0
015BE:  BTSC.B  0.0
015C0:  BSET.B  819.0
....................       if(check_bit == 1) 
015C2:  BTSS.B  819.0
015C4:  BRA     162C
....................       { 
....................          Switch_control(1);      
015C6:  MOV.B   #1,W0L
015C8:  MOV.B   W0L,87E
015CA:  CALL    510
....................          Single_Seg7_led_read(); 
015CE:  CALL    73A
....................          Pulse_switch(1); 
015D2:  MOV.B   #1,W0L
015D4:  MOV.B   W0L,87E
015D6:  CALL    A64
....................          Control_supply(1); 
015DA:  MOV.B   #1,W0L
015DC:  MOV.B   W0L,87E
015DE:  CALL    B50
....................          lcd_gotoxy(0,0); 
015E2:  CLR.B   87E
015E4:  CLR.B   87F
015E6:  CALL    CE2
....................          printf(lcd_putchar,"CONNECT COMPUTER");  
015EA:  MOV     #0,W1
015EC:  MOV     W1,W0
015EE:  CLR.B   1
015F0:  CALL    200
015F4:  INC     W1,W1
015F6:  MOV     W1,[W15++]
015F8:  MOV     W0,886
015FA:  CALL    D2C
015FE:  MOV     [--W15],W1
01600:  MOV     #F,W0
01602:  CPSGT   W1,W0
01604:  BRA     15EC
....................          lcd_gotoxy(0,1); 
01606:  CLR.B   87E
01608:  MOV.B   #1,W0L
0160A:  MOV.B   W0L,87F
0160C:  CALL    CE2
....................          printf(lcd_putchar,"................"); 
01610:  MOV     #0,W1
01612:  MOV     W1,W0
01614:  CLR.B   1
01616:  CALL    21E
0161A:  INC     W1,W1
0161C:  MOV     W1,[W15++]
0161E:  MOV     W0,886
01620:  CALL    D2C
01624:  MOV     [--W15],W1
01626:  MOV     #F,W0
01628:  CPSGT   W1,W0
0162A:  BRA     1612
....................       } 
....................       if(check_bit ==0) 
0162C:  BTSC.B  819.0
0162E:  BRA     1694
....................       { 
....................          Switch_control(0);      
01630:  CLR.B   87E
01632:  CALL    510
....................          Pulse_switch(0); 
01636:  CLR.B   87E
01638:  CALL    A64
....................          Control_supply(0); 
0163C:  CLR.B   87E
0163E:  CALL    B50
....................          control_button(); 
01642:  CALL    1414
....................          if(setup_mode == 0) 
01646:  CP0.B   80E
01648:  BRA     NZ,1694
....................          { 
....................             lcd_gotoxy(0,0); 
0164A:  CLR.B   87E
0164C:  CLR.B   87F
0164E:  CALL    CE2
....................             printf(lcd_putchar,"-LOCAL CONTROL -");  
01652:  MOV     #0,W1
01654:  MOV     W1,W0
01656:  CLR.B   1
01658:  CALL    23C
0165C:  INC     W1,W1
0165E:  MOV     W1,[W15++]
01660:  MOV     W0,886
01662:  CALL    D2C
01666:  MOV     [--W15],W1
01668:  MOV     #F,W0
0166A:  CPSGT   W1,W0
0166C:  BRA     1654
....................             lcd_gotoxy(0,1); 
0166E:  CLR.B   87E
01670:  MOV.B   #1,W0L
01672:  MOV.B   W0L,87F
01674:  CALL    CE2
....................             printf(lcd_putchar,"................"); 
01678:  MOV     #0,W1
0167A:  MOV     W1,W0
0167C:  CLR.B   1
0167E:  CALL    21E
01682:  INC     W1,W1
01684:  MOV     W1,[W15++]
01686:  MOV     W0,886
01688:  CALL    D2C
0168C:  MOV     [--W15],W1
0168E:  MOV     #F,W0
01690:  CPSGT   W1,W0
01692:  BRA     167A
....................          } 
....................       } 
01694:  GOTO    153C
....................    } 
.................... } 
.................... void Switch_control (unsigned char flag) 
*
00510:  MOV     W5,[W15++]
00512:  MOV     #C,W5
00514:  REPEAT  #3
00516:  MOV     [W5++],[W15++]
*
01698:  PWRSAV  #0
.................... { 
....................    if(flag == 1) 
*
00518:  MOV     87E,W4
0051A:  CP.B    W4L,#1
0051C:  BRA     NZ,726
....................    { 
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0051E:  BSET.B  2C0.3
00520:  BTSS.B  2C2.3
00522:  BRA     53E
00524:  BSET.B  2C0.4
00526:  BTSS.B  2C2.4
00528:  BRA     53E
0052A:  BSET.B  2C0.5
0052C:  BTSS.B  2C2.5
0052E:  BRA     53E
00530:  BSET.B  2C0.6
00532:  BTSC.B  2C2.6
00534:  BRA     53E
00536:  BSET.B  2C0.7
00538:  BTSC.B  2C2.7
0053A:  BRA     53E
....................       data_switch = data_switch&0xFE; 
0053C:  BCLR.B  800.0
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
0053E:  BSET.B  2C0.3
00540:  BTSS.B  2C2.3
00542:  BRA     55E
00544:  BSET.B  2C0.4
00546:  BTSS.B  2C2.4
00548:  BRA     55E
0054A:  BSET.B  2C0.5
0054C:  BTSS.B  2C2.5
0054E:  BRA     55E
00550:  BSET.B  2C0.6
00552:  BTSC.B  2C2.6
00554:  BRA     55E
00556:  BSET.B  2C0.7
00558:  BTSS.B  2C2.7
0055A:  BRA     55E
....................       data_switch = data_switch|0x01; 
0055C:  BSET.B  800.0
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0055E:  BSET.B  2C0.3
00560:  BTSC.B  2C2.3
00562:  BRA     57E
00564:  BSET.B  2C0.4
00566:  BTSS.B  2C2.4
00568:  BRA     57E
0056A:  BSET.B  2C0.5
0056C:  BTSS.B  2C2.5
0056E:  BRA     57E
00570:  BSET.B  2C0.6
00572:  BTSC.B  2C2.6
00574:  BRA     57E
00576:  BSET.B  2C0.7
00578:  BTSC.B  2C2.7
0057A:  BRA     57E
....................       data_switch = data_switch&0xFD; 
0057C:  BCLR.B  800.1
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
0057E:  BSET.B  2C0.3
00580:  BTSC.B  2C2.3
00582:  BRA     59E
00584:  BSET.B  2C0.4
00586:  BTSS.B  2C2.4
00588:  BRA     59E
0058A:  BSET.B  2C0.5
0058C:  BTSS.B  2C2.5
0058E:  BRA     59E
00590:  BSET.B  2C0.6
00592:  BTSC.B  2C2.6
00594:  BRA     59E
00596:  BSET.B  2C0.7
00598:  BTSS.B  2C2.7
0059A:  BRA     59E
....................       data_switch = data_switch|0x02; 
0059C:  BSET.B  800.1
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0059E:  BSET.B  2C0.3
005A0:  BTSS.B  2C2.3
005A2:  BRA     5BE
005A4:  BSET.B  2C0.4
005A6:  BTSC.B  2C2.4
005A8:  BRA     5BE
005AA:  BSET.B  2C0.5
005AC:  BTSS.B  2C2.5
005AE:  BRA     5BE
005B0:  BSET.B  2C0.6
005B2:  BTSC.B  2C2.6
005B4:  BRA     5BE
005B6:  BSET.B  2C0.7
005B8:  BTSC.B  2C2.7
005BA:  BRA     5BE
....................       data_switch = data_switch&0xFB; 
005BC:  BCLR.B  800.2
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
005BE:  BSET.B  2C0.3
005C0:  BTSS.B  2C2.3
005C2:  BRA     5DE
005C4:  BSET.B  2C0.4
005C6:  BTSC.B  2C2.4
005C8:  BRA     5DE
005CA:  BSET.B  2C0.5
005CC:  BTSS.B  2C2.5
005CE:  BRA     5DE
005D0:  BSET.B  2C0.6
005D2:  BTSC.B  2C2.6
005D4:  BRA     5DE
005D6:  BSET.B  2C0.7
005D8:  BTSS.B  2C2.7
005DA:  BRA     5DE
....................       data_switch = data_switch|0x04;   
005DC:  BSET.B  800.2
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
005DE:  BSET.B  2C0.3
005E0:  BTSC.B  2C2.3
005E2:  BRA     5FE
005E4:  BSET.B  2C0.4
005E6:  BTSC.B  2C2.4
005E8:  BRA     5FE
005EA:  BSET.B  2C0.5
005EC:  BTSS.B  2C2.5
005EE:  BRA     5FE
005F0:  BSET.B  2C0.6
005F2:  BTSC.B  2C2.6
005F4:  BRA     5FE
005F6:  BSET.B  2C0.7
005F8:  BTSC.B  2C2.7
005FA:  BRA     5FE
....................       data_switch = data_switch&0xF7; 
005FC:  BCLR.B  800.3
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
005FE:  BSET.B  2C0.3
00600:  BTSC.B  2C2.3
00602:  BRA     61E
00604:  BSET.B  2C0.4
00606:  BTSC.B  2C2.4
00608:  BRA     61E
0060A:  BSET.B  2C0.5
0060C:  BTSS.B  2C2.5
0060E:  BRA     61E
00610:  BSET.B  2C0.6
00612:  BTSC.B  2C2.6
00614:  BRA     61E
00616:  BSET.B  2C0.7
00618:  BTSS.B  2C2.7
0061A:  BRA     61E
....................       data_switch = data_switch|0x08;   
0061C:  BSET.B  800.3
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0061E:  BSET.B  2C0.3
00620:  BTSS.B  2C2.3
00622:  BRA     63E
00624:  BSET.B  2C0.4
00626:  BTSS.B  2C2.4
00628:  BRA     63E
0062A:  BSET.B  2C0.5
0062C:  BTSC.B  2C2.5
0062E:  BRA     63E
00630:  BSET.B  2C0.6
00632:  BTSC.B  2C2.6
00634:  BRA     63E
00636:  BSET.B  2C0.7
00638:  BTSC.B  2C2.7
0063A:  BRA     63E
....................       data_switch = data_switch&0xEF; 
0063C:  BCLR.B  800.4
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
0063E:  BSET.B  2C0.3
00640:  BTSS.B  2C2.3
00642:  BRA     65E
00644:  BSET.B  2C0.4
00646:  BTSS.B  2C2.4
00648:  BRA     65E
0064A:  BSET.B  2C0.5
0064C:  BTSC.B  2C2.5
0064E:  BRA     65E
00650:  BSET.B  2C0.6
00652:  BTSC.B  2C2.6
00654:  BRA     65E
00656:  BSET.B  2C0.7
00658:  BTSS.B  2C2.7
0065A:  BRA     65E
....................       data_switch = data_switch|0x10;   
0065C:  BSET.B  800.4
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0065E:  BSET.B  2C0.3
00660:  BTSC.B  2C2.3
00662:  BRA     67E
00664:  BSET.B  2C0.4
00666:  BTSS.B  2C2.4
00668:  BRA     67E
0066A:  BSET.B  2C0.5
0066C:  BTSC.B  2C2.5
0066E:  BRA     67E
00670:  BSET.B  2C0.6
00672:  BTSC.B  2C2.6
00674:  BRA     67E
00676:  BSET.B  2C0.7
00678:  BTSC.B  2C2.7
0067A:  BRA     67E
....................       data_switch = data_switch&0xDF; 
0067C:  BCLR.B  800.5
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
0067E:  BSET.B  2C0.3
00680:  BTSC.B  2C2.3
00682:  BRA     69E
00684:  BSET.B  2C0.4
00686:  BTSS.B  2C2.4
00688:  BRA     69E
0068A:  BSET.B  2C0.5
0068C:  BTSC.B  2C2.5
0068E:  BRA     69E
00690:  BSET.B  2C0.6
00692:  BTSC.B  2C2.6
00694:  BRA     69E
00696:  BSET.B  2C0.7
00698:  BTSS.B  2C2.7
0069A:  BRA     69E
....................       data_switch = data_switch|0x20;  
0069C:  BSET.B  800.5
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
0069E:  BSET.B  2C0.3
006A0:  BTSS.B  2C2.3
006A2:  BRA     6BE
006A4:  BSET.B  2C0.4
006A6:  BTSC.B  2C2.4
006A8:  BRA     6BE
006AA:  BSET.B  2C0.5
006AC:  BTSC.B  2C2.5
006AE:  BRA     6BE
006B0:  BSET.B  2C0.6
006B2:  BTSC.B  2C2.6
006B4:  BRA     6BE
006B6:  BSET.B  2C0.7
006B8:  BTSC.B  2C2.7
006BA:  BRA     6BE
....................       data_switch = data_switch&0xBF; 
006BC:  BCLR.B  800.6
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
006BE:  BSET.B  2C0.3
006C0:  BTSS.B  2C2.3
006C2:  BRA     6DE
006C4:  BSET.B  2C0.4
006C6:  BTSC.B  2C2.4
006C8:  BRA     6DE
006CA:  BSET.B  2C0.5
006CC:  BTSC.B  2C2.5
006CE:  BRA     6DE
006D0:  BSET.B  2C0.6
006D2:  BTSC.B  2C2.6
006D4:  BRA     6DE
006D6:  BSET.B  2C0.7
006D8:  BTSS.B  2C2.7
006DA:  BRA     6DE
....................       data_switch = data_switch|0x40; 
006DC:  BSET.B  800.6
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 0)) 
006DE:  BSET.B  2C0.3
006E0:  BTSC.B  2C2.3
006E2:  BRA     6FE
006E4:  BSET.B  2C0.4
006E6:  BTSC.B  2C2.4
006E8:  BRA     6FE
006EA:  BSET.B  2C0.5
006EC:  BTSC.B  2C2.5
006EE:  BRA     6FE
006F0:  BSET.B  2C0.6
006F2:  BTSC.B  2C2.6
006F4:  BRA     6FE
006F6:  BSET.B  2C0.7
006F8:  BTSC.B  2C2.7
006FA:  BRA     6FE
....................       data_switch = data_switch&0x7F; 
006FC:  BCLR.B  800.7
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 0)&&(input(Dat_SW) == 1)) 
006FE:  BSET.B  2C0.3
00700:  BTSC.B  2C2.3
00702:  BRA     71E
00704:  BSET.B  2C0.4
00706:  BTSC.B  2C2.4
00708:  BRA     71E
0070A:  BSET.B  2C0.5
0070C:  BTSC.B  2C2.5
0070E:  BRA     71E
00710:  BSET.B  2C0.6
00712:  BTSC.B  2C2.6
00714:  BRA     71E
00716:  BSET.B  2C0.7
00718:  BTSS.B  2C2.7
0071A:  BRA     71E
....................       data_switch = data_switch|0x80; 
0071C:  BSET.B  800.7
....................       output_F(0x0100|data_switch); 
0071E:  MOV     800,W5
00720:  IOR     #100,W5
00722:  CLR     2DE
00724:  MOV     W5,2E2
....................    } 
....................    if(flag == 0)output_F(0x00FF); 
00726:  CP0.B   87E
00728:  BRA     NZ,730
0072A:  CLR     2DE
0072C:  MOV     #FF,W4
0072E:  MOV     W4,2E2
00730:  MOV     #12,W5
00732:  REPEAT  #3
00734:  MOV     [--W15],[W5--]
00736:  MOV     [--W15],W5
00738:  RETURN  
.................... } 
.................... void Single_Seg7_led_read (void) 
0073A:  MOV     W5,[W15++]
0073C:  MOV     W6,[W15++]
0073E:  MOV     W7,[W15++]
00740:  MOV     W8,[W15++]
.................... { 
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)) 
00742:  BSET.B  2C1.2
00744:  BTSC.B  2C3.2
00746:  BRA     770
00748:  BSET.B  2C1.1
0074A:  BTSC.B  2C3.1
0074C:  BRA     770
0074E:  BSET.B  2C1.6
00750:  BTSC.B  2C3.6
00752:  BRA     770
00754:  BSET.B  2C1.7
00756:  BTSC.B  2C3.7
00758:  BRA     770
....................       {output_bit(Dat_Led,input(LED1));delay_ms(2);} 
0075A:  BSET.B  2D2.2
0075C:  BTSC.B  2D4.2
0075E:  BRA     764
00760:  BCLR.B  2CA.1
00762:  BRA     766
00764:  BSET.B  2CA.1
00766:  BCLR.B  2C6.1
00768:  REPEAT  #E1E
0076A:  NOP     
0076C:  REPEAT  #3FFF
0076E:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)) 
00770:  BSET.B  2C1.2
00772:  BTSS.B  2C3.2
00774:  BRA     79E
00776:  BSET.B  2C1.1
00778:  BTSC.B  2C3.1
0077A:  BRA     79E
0077C:  BSET.B  2C1.6
0077E:  BTSC.B  2C3.6
00780:  BRA     79E
00782:  BSET.B  2C1.7
00784:  BTSC.B  2C3.7
00786:  BRA     79E
....................       {output_bit(Dat_Led,input(LED2));delay_ms(2);} 
00788:  BSET.B  2D2.3
0078A:  BTSC.B  2D4.3
0078C:  BRA     792
0078E:  BCLR.B  2CA.1
00790:  BRA     794
00792:  BSET.B  2CA.1
00794:  BCLR.B  2C6.1
00796:  REPEAT  #E1E
00798:  NOP     
0079A:  REPEAT  #3FFF
0079C:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)) 
0079E:  BSET.B  2C1.2
007A0:  BTSC.B  2C3.2
007A2:  BRA     7CC
007A4:  BSET.B  2C1.1
007A6:  BTSS.B  2C3.1
007A8:  BRA     7CC
007AA:  BSET.B  2C1.6
007AC:  BTSC.B  2C3.6
007AE:  BRA     7CC
007B0:  BSET.B  2C1.7
007B2:  BTSC.B  2C3.7
007B4:  BRA     7CC
....................       {output_bit(Dat_Led,input(LED3));delay_ms(2);} 
007B6:  BSET.B  2D2.4
007B8:  BTSC.B  2D4.4
007BA:  BRA     7C0
007BC:  BCLR.B  2CA.1
007BE:  BRA     7C2
007C0:  BSET.B  2CA.1
007C2:  BCLR.B  2C6.1
007C4:  REPEAT  #E1E
007C6:  NOP     
007C8:  REPEAT  #3FFF
007CA:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)) 
007CC:  BSET.B  2C1.2
007CE:  BTSS.B  2C3.2
007D0:  BRA     7FA
007D2:  BSET.B  2C1.1
007D4:  BTSS.B  2C3.1
007D6:  BRA     7FA
007D8:  BSET.B  2C1.6
007DA:  BTSC.B  2C3.6
007DC:  BRA     7FA
007DE:  BSET.B  2C1.7
007E0:  BTSC.B  2C3.7
007E2:  BRA     7FA
....................       {output_bit(Dat_Led,input(LED4));delay_ms(2);} 
007E4:  BSET.B  2D2.5
007E6:  BTSC.B  2D4.5
007E8:  BRA     7EE
007EA:  BCLR.B  2CA.1
007EC:  BRA     7F0
007EE:  BSET.B  2CA.1
007F0:  BCLR.B  2C6.1
007F2:  REPEAT  #E1E
007F4:  NOP     
007F6:  REPEAT  #3FFF
007F8:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 0)) 
007FA:  BSET.B  2C1.2
007FC:  BTSC.B  2C3.2
007FE:  BRA     828
00800:  BSET.B  2C1.1
00802:  BTSC.B  2C3.1
00804:  BRA     828
00806:  BSET.B  2C1.6
00808:  BTSS.B  2C3.6
0080A:  BRA     828
0080C:  BSET.B  2C1.7
0080E:  BTSC.B  2C3.7
00810:  BRA     828
....................       {output_bit(Dat_Led,input(LED5));delay_ms(2);} 
00812:  BSET.B  2D2.6
00814:  BTSC.B  2D4.6
00816:  BRA     81C
00818:  BCLR.B  2CA.1
0081A:  BRA     81E
0081C:  BSET.B  2CA.1
0081E:  BCLR.B  2C6.1
00820:  REPEAT  #E1E
00822:  NOP     
00824:  REPEAT  #3FFF
00826:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 0)) 
00828:  BSET.B  2C1.2
0082A:  BTSS.B  2C3.2
0082C:  BRA     856
0082E:  BSET.B  2C1.1
00830:  BTSC.B  2C3.1
00832:  BRA     856
00834:  BSET.B  2C1.6
00836:  BTSS.B  2C3.6
00838:  BRA     856
0083A:  BSET.B  2C1.7
0083C:  BTSC.B  2C3.7
0083E:  BRA     856
....................       {output_bit(Dat_Led,input(LED6));delay_ms(2);} 
00840:  BSET.B  2D2.7
00842:  BTSC.B  2D4.7
00844:  BRA     84A
00846:  BCLR.B  2CA.1
00848:  BRA     84C
0084A:  BSET.B  2CA.1
0084C:  BCLR.B  2C6.1
0084E:  REPEAT  #E1E
00850:  NOP     
00852:  REPEAT  #3FFF
00854:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 0)) 
00856:  BSET.B  2C1.2
00858:  BTSC.B  2C3.2
0085A:  BRA     884
0085C:  BSET.B  2C1.1
0085E:  BTSS.B  2C3.1
00860:  BRA     884
00862:  BSET.B  2C1.6
00864:  BTSS.B  2C3.6
00866:  BRA     884
00868:  BSET.B  2C1.7
0086A:  BTSC.B  2C3.7
0086C:  BRA     884
....................       {output_bit(Dat_Led,input(LED7));delay_ms(2);} 
0086E:  BSET.B  2D3.0
00870:  BTSC.B  2D5.0
00872:  BRA     878
00874:  BCLR.B  2CA.1
00876:  BRA     87A
00878:  BSET.B  2CA.1
0087A:  BCLR.B  2C6.1
0087C:  REPEAT  #E1E
0087E:  NOP     
00880:  REPEAT  #3FFF
00882:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 0)) 
00884:  BSET.B  2C1.2
00886:  BTSS.B  2C3.2
00888:  BRA     8B2
0088A:  BSET.B  2C1.1
0088C:  BTSS.B  2C3.1
0088E:  BRA     8B2
00890:  BSET.B  2C1.6
00892:  BTSS.B  2C3.6
00894:  BRA     8B2
00896:  BSET.B  2C1.7
00898:  BTSC.B  2C3.7
0089A:  BRA     8B2
....................       {output_bit(Dat_Led,input(LED8));delay_ms(2);} 
0089C:  BSET.B  2D3.1
0089E:  BTSC.B  2D5.1
008A0:  BRA     8A6
008A2:  BCLR.B  2CA.1
008A4:  BRA     8A8
008A6:  BSET.B  2CA.1
008A8:  BCLR.B  2C6.1
008AA:  REPEAT  #E1E
008AC:  NOP     
008AE:  REPEAT  #3FFF
008B0:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 1)) 
008B2:  BSET.B  2C1.2
008B4:  BTSC.B  2C3.2
008B6:  BRA     8E4
008B8:  BSET.B  2C1.1
008BA:  BTSC.B  2C3.1
008BC:  BRA     8E4
008BE:  BSET.B  2C1.6
008C0:  BTSC.B  2C3.6
008C2:  BRA     8E4
008C4:  BSET.B  2C1.7
008C6:  BTSS.B  2C3.7
008C8:  BRA     8E4
....................       {output_bit(Dat_Led,data_seg7_led1&0x0001);delay_ms(2);} 
008CA:  MOV.B   802,W0L
008CC:  CLR.B   1
008CE:  AND     W0,#1,W0
008D0:  CP0     W0
008D2:  BRA     NZ,8D8
008D4:  BCLR.B  2CA.1
008D6:  BRA     8DA
008D8:  BSET.B  2CA.1
008DA:  BCLR.B  2C6.1
008DC:  REPEAT  #E1E
008DE:  NOP     
008E0:  REPEAT  #3FFF
008E2:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 1)) 
008E4:  BSET.B  2C1.2
008E6:  BTSS.B  2C3.2
008E8:  BRA     91A
008EA:  BSET.B  2C1.1
008EC:  BTSC.B  2C3.1
008EE:  BRA     91A
008F0:  BSET.B  2C1.6
008F2:  BTSC.B  2C3.6
008F4:  BRA     91A
008F6:  BSET.B  2C1.7
008F8:  BTSS.B  2C3.7
008FA:  BRA     91A
....................       {output_bit(Dat_Led,(data_seg7_led1 >> 1)&0x0001);delay_ms(2);} 
008FC:  MOV     802,W5
008FE:  CLR.B   B
00900:  CLR.B   B
00902:  LSR     W5,#1,W5
00904:  AND     W5,#1,W0
00906:  CP0     W0
00908:  BRA     NZ,90E
0090A:  BCLR.B  2CA.1
0090C:  BRA     910
0090E:  BSET.B  2CA.1
00910:  BCLR.B  2C6.1
00912:  REPEAT  #E1E
00914:  NOP     
00916:  REPEAT  #3FFF
00918:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 1)) 
0091A:  BSET.B  2C1.2
0091C:  BTSC.B  2C3.2
0091E:  BRA     950
00920:  BSET.B  2C1.1
00922:  BTSS.B  2C3.1
00924:  BRA     950
00926:  BSET.B  2C1.6
00928:  BTSC.B  2C3.6
0092A:  BRA     950
0092C:  BSET.B  2C1.7
0092E:  BTSS.B  2C3.7
00930:  BRA     950
....................       {output_bit(Dat_Led,(data_seg7_led1 >> 2)&0x0001);delay_ms(2);} 
00932:  MOV     802,W5
00934:  CLR.B   B
00936:  CLR.B   B
00938:  LSR     W5,#2,W5
0093A:  AND     W5,#1,W0
0093C:  CP0     W0
0093E:  BRA     NZ,944
00940:  BCLR.B  2CA.1
00942:  BRA     946
00944:  BSET.B  2CA.1
00946:  BCLR.B  2C6.1
00948:  REPEAT  #E1E
0094A:  NOP     
0094C:  REPEAT  #3FFF
0094E:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 1)) 
00950:  BSET.B  2C1.2
00952:  BTSS.B  2C3.2
00954:  BRA     986
00956:  BSET.B  2C1.1
00958:  BTSS.B  2C3.1
0095A:  BRA     986
0095C:  BSET.B  2C1.6
0095E:  BTSC.B  2C3.6
00960:  BRA     986
00962:  BSET.B  2C1.7
00964:  BTSS.B  2C3.7
00966:  BRA     986
....................       {output_bit(Dat_Led,(data_seg7_led1 >> 3)&0x0001);delay_ms(2);} 
00968:  MOV     802,W5
0096A:  CLR.B   B
0096C:  CLR.B   B
0096E:  LSR     W5,#3,W5
00970:  AND     W5,#1,W0
00972:  CP0     W0
00974:  BRA     NZ,97A
00976:  BCLR.B  2CA.1
00978:  BRA     97C
0097A:  BSET.B  2CA.1
0097C:  BCLR.B  2C6.1
0097E:  REPEAT  #E1E
00980:  NOP     
00982:  REPEAT  #3FFF
00984:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 1)) 
00986:  BSET.B  2C1.2
00988:  BTSC.B  2C3.2
0098A:  BRA     9B8
0098C:  BSET.B  2C1.1
0098E:  BTSC.B  2C3.1
00990:  BRA     9B8
00992:  BSET.B  2C1.6
00994:  BTSS.B  2C3.6
00996:  BRA     9B8
00998:  BSET.B  2C1.7
0099A:  BTSS.B  2C3.7
0099C:  BRA     9B8
....................       {output_bit(Dat_Led,data_seg7_led2&0x0001);delay_ms(2);} 
0099E:  MOV.B   803,W0L
009A0:  CLR.B   1
009A2:  AND     W0,#1,W0
009A4:  CP0     W0
009A6:  BRA     NZ,9AC
009A8:  BCLR.B  2CA.1
009AA:  BRA     9AE
009AC:  BSET.B  2CA.1
009AE:  BCLR.B  2C6.1
009B0:  REPEAT  #E1E
009B2:  NOP     
009B4:  REPEAT  #3FFF
009B6:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 1)) 
009B8:  BSET.B  2C1.2
009BA:  BTSS.B  2C3.2
009BC:  BRA     9EE
009BE:  BSET.B  2C1.1
009C0:  BTSC.B  2C3.1
009C2:  BRA     9EE
009C4:  BSET.B  2C1.6
009C6:  BTSS.B  2C3.6
009C8:  BRA     9EE
009CA:  BSET.B  2C1.7
009CC:  BTSS.B  2C3.7
009CE:  BRA     9EE
....................       {output_bit(Dat_Led,(data_seg7_led2 >> 1)&0x0001);delay_ms(2);} 
009D0:  MOV     802,W5
009D2:  LSR     W5,#8,W5
009D4:  CLR.B   B
009D6:  LSR     W5,#1,W5
009D8:  AND     W5,#1,W0
009DA:  CP0     W0
009DC:  BRA     NZ,9E2
009DE:  BCLR.B  2CA.1
009E0:  BRA     9E4
009E2:  BSET.B  2CA.1
009E4:  BCLR.B  2C6.1
009E6:  REPEAT  #E1E
009E8:  NOP     
009EA:  REPEAT  #3FFF
009EC:  NOP     
....................       if((input(Add_Led1) == 0)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 1)) 
009EE:  BSET.B  2C1.2
009F0:  BTSC.B  2C3.2
009F2:  BRA     A24
009F4:  BSET.B  2C1.1
009F6:  BTSS.B  2C3.1
009F8:  BRA     A24
009FA:  BSET.B  2C1.6
009FC:  BTSS.B  2C3.6
009FE:  BRA     A24
00A00:  BSET.B  2C1.7
00A02:  BTSS.B  2C3.7
00A04:  BRA     A24
....................       {output_bit(Dat_Led,(data_seg7_led2 >> 2)&0x0001);delay_ms(2);} 
00A06:  MOV     802,W5
00A08:  LSR     W5,#8,W5
00A0A:  CLR.B   B
00A0C:  LSR     W5,#2,W5
00A0E:  AND     W5,#1,W0
00A10:  CP0     W0
00A12:  BRA     NZ,A18
00A14:  BCLR.B  2CA.1
00A16:  BRA     A1A
00A18:  BSET.B  2CA.1
00A1A:  BCLR.B  2C6.1
00A1C:  REPEAT  #E1E
00A1E:  NOP     
00A20:  REPEAT  #3FFF
00A22:  NOP     
....................       if((input(Add_Led1) == 1)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 1)&&(input(Add_Led4) == 1)) 
00A24:  BSET.B  2C1.2
00A26:  BTSS.B  2C3.2
00A28:  BRA     A5A
00A2A:  BSET.B  2C1.1
00A2C:  BTSS.B  2C3.1
00A2E:  BRA     A5A
00A30:  BSET.B  2C1.6
00A32:  BTSS.B  2C3.6
00A34:  BRA     A5A
00A36:  BSET.B  2C1.7
00A38:  BTSS.B  2C3.7
00A3A:  BRA     A5A
....................       {output_bit(Dat_Led,(data_seg7_led2 >> 3)&0x0001);delay_ms(2);}   
00A3C:  MOV     802,W5
00A3E:  LSR     W5,#8,W5
00A40:  CLR.B   B
00A42:  LSR     W5,#3,W5
00A44:  AND     W5,#1,W0
00A46:  CP0     W0
00A48:  BRA     NZ,A4E
00A4A:  BCLR.B  2CA.1
00A4C:  BRA     A50
00A4E:  BSET.B  2CA.1
00A50:  BCLR.B  2C6.1
00A52:  REPEAT  #E1E
00A54:  NOP     
00A56:  REPEAT  #3FFF
00A58:  NOP     
00A5A:  MOV     [--W15],W8
00A5C:  MOV     [--W15],W7
00A5E:  MOV     [--W15],W6
00A60:  MOV     [--W15],W5
00A62:  RETURN  
.................... } 
.................... void Pulse_switch (unsigned char flag) 
00A64:  MOV     W5,[W15++]
00A66:  MOV     #C,W5
00A68:  REPEAT  #3
00A6A:  MOV     [W5++],[W15++]
.................... { 
....................    if(flag == 0) 
00A6C:  CP0.B   87E
00A6E:  BRA     NZ,AA8
....................    { 
....................       output_bit(PULSEA,~input(PX)); 
00A70:  BSET.B  2D2.0
00A72:  BTSS.B  2D4.0
00A74:  BRA     A7A
00A76:  BCLR.B  2E9.1
00A78:  BRA     A7C
00A7A:  BSET.B  2E9.1
00A7C:  BCLR.B  2E5.1
....................       output_bit(PULSEA_,input(PX)); 
00A7E:  BSET.B  2D2.0
00A80:  BTSC.B  2D4.0
00A82:  BRA     A88
00A84:  BCLR.B  2E9.0
00A86:  BRA     A8A
00A88:  BSET.B  2E9.0
00A8A:  BCLR.B  2E5.0
....................       output_bit(PULSEB,~input(PY)); 
00A8C:  BSET.B  2D2.1
00A8E:  BTSS.B  2D4.1
00A90:  BRA     A96
00A92:  BCLR.B  2D1.5
00A94:  BRA     A98
00A96:  BSET.B  2D1.5
00A98:  BCLR.B  2CD.5
....................       output_bit(PULSEB_,input(PY)); 
00A9A:  BSET.B  2D2.1
00A9C:  BTSC.B  2D4.1
00A9E:  BRA     AA4
00AA0:  BCLR.B  2D1.6
00AA2:  BRA     AA6
00AA4:  BSET.B  2D1.6
00AA6:  BCLR.B  2CD.6
....................    } 
....................    if(flag == 1) 
00AA8:  MOV     87E,W4
00AAA:  CP.B    W4L,#1
00AAC:  BRA     NZ,B46
....................    { 
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00AAE:  BSET.B  2C0.3
00AB0:  BTSC.B  2C2.3
00AB2:  BRA     AD4
00AB4:  BSET.B  2C0.4
00AB6:  BTSC.B  2C2.4
00AB8:  BRA     AD4
00ABA:  BSET.B  2C0.5
00ABC:  BTSC.B  2C2.5
00ABE:  BRA     AD4
00AC0:  BSET.B  2C0.6
00AC2:  BTSS.B  2C2.6
00AC4:  BRA     AD4
00AC6:  BSET.B  2C0.7
00AC8:  BTSS.B  2C2.7
00ACA:  BRA     AD4
....................       {output_high(PULSEA);output_low(PULSEA_);} 
00ACC:  BCLR.B  2E5.1
00ACE:  BSET.B  2E9.1
00AD0:  BCLR.B  2E5.0
00AD2:  BCLR.B  2E9.0
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00AD4:  BSET.B  2C0.3
00AD6:  BTSC.B  2C2.3
00AD8:  BRA     AFA
00ADA:  BSET.B  2C0.4
00ADC:  BTSC.B  2C2.4
00ADE:  BRA     AFA
00AE0:  BSET.B  2C0.5
00AE2:  BTSC.B  2C2.5
00AE4:  BRA     AFA
00AE6:  BSET.B  2C0.6
00AE8:  BTSS.B  2C2.6
00AEA:  BRA     AFA
00AEC:  BSET.B  2C0.7
00AEE:  BTSC.B  2C2.7
00AF0:  BRA     AFA
....................       {output_low(PULSEA);output_high(PULSEA_);} 
00AF2:  BCLR.B  2E5.1
00AF4:  BCLR.B  2E9.1
00AF6:  BCLR.B  2E5.0
00AF8:  BSET.B  2E9.0
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00AFA:  BSET.B  2C0.3
00AFC:  BTSS.B  2C2.3
00AFE:  BRA     B20
00B00:  BSET.B  2C0.4
00B02:  BTSC.B  2C2.4
00B04:  BRA     B20
00B06:  BSET.B  2C0.5
00B08:  BTSC.B  2C2.5
00B0A:  BRA     B20
00B0C:  BSET.B  2C0.6
00B0E:  BTSS.B  2C2.6
00B10:  BRA     B20
00B12:  BSET.B  2C0.7
00B14:  BTSS.B  2C2.7
00B16:  BRA     B20
....................       {output_high(PULSEB);output_low(PULSEB_);} 
00B18:  BCLR.B  2CD.5
00B1A:  BSET.B  2D1.5
00B1C:  BCLR.B  2CD.6
00B1E:  BCLR.B  2D1.6
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00B20:  BSET.B  2C0.3
00B22:  BTSS.B  2C2.3
00B24:  BRA     B46
00B26:  BSET.B  2C0.4
00B28:  BTSC.B  2C2.4
00B2A:  BRA     B46
00B2C:  BSET.B  2C0.5
00B2E:  BTSC.B  2C2.5
00B30:  BRA     B46
00B32:  BSET.B  2C0.6
00B34:  BTSS.B  2C2.6
00B36:  BRA     B46
00B38:  BSET.B  2C0.7
00B3A:  BTSC.B  2C2.7
00B3C:  BRA     B46
....................       {output_low(PULSEB);output_high(PULSEB_);} 
00B3E:  BCLR.B  2CD.5
00B40:  BCLR.B  2D1.5
00B42:  BCLR.B  2CD.6
00B44:  BSET.B  2D1.6
....................    } 
00B46:  MOV     #12,W5
00B48:  REPEAT  #3
00B4A:  MOV     [--W15],[W5--]
00B4C:  MOV     [--W15],W5
00B4E:  RETURN  
.................... } 
....................  
.................... void Control_supply (unsigned char flag) 
00B50:  MOV     W5,[W15++]
00B52:  MOV     #C,W5
00B54:  REPEAT  #3
00B56:  MOV     [W5++],[W15++]
.................... { 
....................    if(flag == 0) 
00B58:  CP0.B   87E
00B5A:  BRA     NZ,BAA
....................    { 
....................       re_local = 0; 
00B5C:  CLR.B   80D
....................       if(power_on_5V == 1)output_high(ON_5V); 
00B5E:  MOV     808,W4
00B60:  CP.B    W4L,#1
00B62:  BRA     NZ,B6C
00B64:  BCLR.B  2D8.6
00B66:  BSET.B  2DC.6
00B68:  GOTO    B70
....................       else output_low(ON_5V); 
00B6C:  BCLR.B  2D8.6
00B6E:  BCLR.B  2DC.6
....................       if(power_on_12V == 1)output_high(ON_12V); 
00B70:  MOV     808,W4
00B72:  LSR     W4,#8,W4
00B74:  CP.B    W4L,#1
00B76:  BRA     NZ,B80
00B78:  BCLR.B  2D8.7
00B7A:  BSET.B  2DC.7
00B7C:  GOTO    B84
....................       else output_low(ON_12V); 
00B80:  BCLR.B  2D8.7
00B82:  BCLR.B  2DC.7
....................       if(power_on_5V_ == 1)output_high(ON_5V_); 
00B84:  MOV     80A,W4
00B86:  CP.B    W4L,#1
00B88:  BRA     NZ,B92
00B8A:  BCLR.B  2D9.0
00B8C:  BSET.B  2DD.0
00B8E:  GOTO    B96
....................       else output_low(ON_5V_); 
00B92:  BCLR.B  2D9.0
00B94:  BCLR.B  2DD.0
....................       if(power_on_12V_ == 1)output_high(ON_12V_); 
00B96:  MOV     80A,W4
00B98:  LSR     W4,#8,W4
00B9A:  CP.B    W4L,#1
00B9C:  BRA     NZ,BA6
00B9E:  BCLR.B  2D9.1
00BA0:  BSET.B  2DD.1
00BA2:  GOTO    BAA
....................       else output_low(ON_12V_); 
00BA6:  BCLR.B  2D9.1
00BA8:  BCLR.B  2DD.1
....................    } 
....................    if(flag == 1) 
00BAA:  MOV     87E,W4
00BAC:  CP.B    W4L,#1
00BAE:  BRA     NZ,CD8
....................    { 
....................       if(re_local == 0) 
00BB0:  CP0.B   80D
00BB2:  BRA     NZ,BC8
....................       { 
....................          output_low(ON_5V); 
00BB4:  BCLR.B  2D8.6
00BB6:  BCLR.B  2DC.6
....................          output_low(ON_12V); 
00BB8:  BCLR.B  2D8.7
00BBA:  BCLR.B  2DC.7
....................          output_low(ON_5V_); 
00BBC:  BCLR.B  2D9.0
00BBE:  BCLR.B  2DD.0
....................          output_low(ON_12V_); 
00BC0:  BCLR.B  2D9.1
00BC2:  BCLR.B  2DD.1
....................          re_local = 1; 
00BC4:  MOV.B   #1,W0L
00BC6:  MOV.B   W0L,80D
....................       } 
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00BC8:  BSET.B  2C0.3
00BCA:  BTSC.B  2C2.3
00BCC:  BRA     BEA
00BCE:  BSET.B  2C0.4
00BD0:  BTSS.B  2C2.4
00BD2:  BRA     BEA
00BD4:  BSET.B  2C0.5
00BD6:  BTSC.B  2C2.5
00BD8:  BRA     BEA
00BDA:  BSET.B  2C0.6
00BDC:  BTSS.B  2C2.6
00BDE:  BRA     BEA
00BE0:  BSET.B  2C0.7
00BE2:  BTSS.B  2C2.7
00BE4:  BRA     BEA
....................       output_high(ON_5V); 
00BE6:  BCLR.B  2D8.6
00BE8:  BSET.B  2DC.6
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00BEA:  BSET.B  2C0.3
00BEC:  BTSC.B  2C2.3
00BEE:  BRA     C0C
00BF0:  BSET.B  2C0.4
00BF2:  BTSS.B  2C2.4
00BF4:  BRA     C0C
00BF6:  BSET.B  2C0.5
00BF8:  BTSC.B  2C2.5
00BFA:  BRA     C0C
00BFC:  BSET.B  2C0.6
00BFE:  BTSS.B  2C2.6
00C00:  BRA     C0C
00C02:  BSET.B  2C0.7
00C04:  BTSC.B  2C2.7
00C06:  BRA     C0C
....................       output_low(ON_5V); 
00C08:  BCLR.B  2D8.6
00C0A:  BCLR.B  2DC.6
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00C0C:  BSET.B  2C0.3
00C0E:  BTSS.B  2C2.3
00C10:  BRA     C2E
00C12:  BSET.B  2C0.4
00C14:  BTSS.B  2C2.4
00C16:  BRA     C2E
00C18:  BSET.B  2C0.5
00C1A:  BTSC.B  2C2.5
00C1C:  BRA     C2E
00C1E:  BSET.B  2C0.6
00C20:  BTSS.B  2C2.6
00C22:  BRA     C2E
00C24:  BSET.B  2C0.7
00C26:  BTSS.B  2C2.7
00C28:  BRA     C2E
....................       output_high(ON_12V); 
00C2A:  BCLR.B  2D8.7
00C2C:  BSET.B  2DC.7
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 1)&&(input(Add_SW3) == 0)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00C2E:  BSET.B  2C0.3
00C30:  BTSS.B  2C2.3
00C32:  BRA     C50
00C34:  BSET.B  2C0.4
00C36:  BTSS.B  2C2.4
00C38:  BRA     C50
00C3A:  BSET.B  2C0.5
00C3C:  BTSC.B  2C2.5
00C3E:  BRA     C50
00C40:  BSET.B  2C0.6
00C42:  BTSS.B  2C2.6
00C44:  BRA     C50
00C46:  BSET.B  2C0.7
00C48:  BTSC.B  2C2.7
00C4A:  BRA     C50
....................       output_low(ON_12V); 
00C4C:  BCLR.B  2D8.7
00C4E:  BCLR.B  2DC.7
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00C50:  BSET.B  2C0.3
00C52:  BTSC.B  2C2.3
00C54:  BRA     C72
00C56:  BSET.B  2C0.4
00C58:  BTSC.B  2C2.4
00C5A:  BRA     C72
00C5C:  BSET.B  2C0.5
00C5E:  BTSS.B  2C2.5
00C60:  BRA     C72
00C62:  BSET.B  2C0.6
00C64:  BTSS.B  2C2.6
00C66:  BRA     C72
00C68:  BSET.B  2C0.7
00C6A:  BTSS.B  2C2.7
00C6C:  BRA     C72
....................       output_high(ON_5V_); 
00C6E:  BCLR.B  2D9.0
00C70:  BSET.B  2DD.0
....................       if((input(Add_SW1) == 0)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00C72:  BSET.B  2C0.3
00C74:  BTSC.B  2C2.3
00C76:  BRA     C94
00C78:  BSET.B  2C0.4
00C7A:  BTSC.B  2C2.4
00C7C:  BRA     C94
00C7E:  BSET.B  2C0.5
00C80:  BTSS.B  2C2.5
00C82:  BRA     C94
00C84:  BSET.B  2C0.6
00C86:  BTSS.B  2C2.6
00C88:  BRA     C94
00C8A:  BSET.B  2C0.7
00C8C:  BTSC.B  2C2.7
00C8E:  BRA     C94
....................       output_low(ON_5V_); 
00C90:  BCLR.B  2D9.0
00C92:  BCLR.B  2DD.0
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 1)) 
00C94:  BSET.B  2C0.3
00C96:  BTSS.B  2C2.3
00C98:  BRA     CB6
00C9A:  BSET.B  2C0.4
00C9C:  BTSC.B  2C2.4
00C9E:  BRA     CB6
00CA0:  BSET.B  2C0.5
00CA2:  BTSS.B  2C2.5
00CA4:  BRA     CB6
00CA6:  BSET.B  2C0.6
00CA8:  BTSS.B  2C2.6
00CAA:  BRA     CB6
00CAC:  BSET.B  2C0.7
00CAE:  BTSS.B  2C2.7
00CB0:  BRA     CB6
....................       output_high(ON_12V_); 
00CB2:  BCLR.B  2D9.1
00CB4:  BSET.B  2DD.1
....................       if((input(Add_SW1) == 1)&&(input(Add_SW2) == 0)&&(input(Add_SW3) == 1)&&(input(Add_SW4) == 1)&&(input(Dat_SW) == 0)) 
00CB6:  BSET.B  2C0.3
00CB8:  BTSS.B  2C2.3
00CBA:  BRA     CD8
00CBC:  BSET.B  2C0.4
00CBE:  BTSC.B  2C2.4
00CC0:  BRA     CD8
00CC2:  BSET.B  2C0.5
00CC4:  BTSS.B  2C2.5
00CC6:  BRA     CD8
00CC8:  BSET.B  2C0.6
00CCA:  BTSS.B  2C2.6
00CCC:  BRA     CD8
00CCE:  BSET.B  2C0.7
00CD0:  BTSC.B  2C2.7
00CD2:  BRA     CD8
....................       output_low(ON_12V_); 
00CD4:  BCLR.B  2D9.1
00CD6:  BCLR.B  2DD.1
....................    } 
00CD8:  MOV     #12,W5
00CDA:  REPEAT  #3
00CDC:  MOV     [--W15],[W5--]
00CDE:  MOV     [--W15],W5
00CE0:  RETURN  
.................... } 
.................... unsigned char Check_connect_computer (void) 
*
00470:  MOV     W5,[W15++]
00472:  MOV     W6,[W15++]
00474:  MOV     W7,[W15++]
00476:  MOV     W8,[W15++]
.................... {    
....................    if((input(Add_Led1) == 0)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)){dat1 = 200;} 
00478:  BSET.B  2C1.2
0047A:  BTSC.B  2C3.2
0047C:  BRA     494
0047E:  BSET.B  2C1.1
00480:  BTSC.B  2C3.1
00482:  BRA     494
00484:  BSET.B  2C1.6
00486:  BTSC.B  2C3.6
00488:  BRA     494
0048A:  BSET.B  2C1.7
0048C:  BTSC.B  2C3.7
0048E:  BRA     494
00490:  MOV.B   #C8,W0L
00492:  MOV.B   W0L,804
....................    if((input(Add_Led1) == 1)&&(input(Add_Led2) == 0)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)){dat2 = 200;} 
00494:  BSET.B  2C1.2
00496:  BTSS.B  2C3.2
00498:  BRA     4B0
0049A:  BSET.B  2C1.1
0049C:  BTSC.B  2C3.1
0049E:  BRA     4B0
004A0:  BSET.B  2C1.6
004A2:  BTSC.B  2C3.6
004A4:  BRA     4B0
004A6:  BSET.B  2C1.7
004A8:  BTSC.B  2C3.7
004AA:  BRA     4B0
004AC:  MOV.B   #C8,W0L
004AE:  MOV.B   W0L,805
....................    if((input(Add_Led1) == 0)&&(input(Add_Led2) == 1)&&(input(Add_Led3) == 0)&&(input(Add_Led4) == 0)){dat3 = 200;} 
004B0:  BSET.B  2C1.2
004B2:  BTSC.B  2C3.2
004B4:  BRA     4CC
004B6:  BSET.B  2C1.1
004B8:  BTSS.B  2C3.1
004BA:  BRA     4CC
004BC:  BSET.B  2C1.6
004BE:  BTSC.B  2C3.6
004C0:  BRA     4CC
004C2:  BSET.B  2C1.7
004C4:  BTSC.B  2C3.7
004C6:  BRA     4CC
004C8:  MOV.B   #C8,W0L
004CA:  MOV.B   W0L,806
....................    if((dat1 >= 10)&&(dat2 >= 10)&&(dat3 >= 10))data = 1; 
004CC:  MOV     804,W4
004CE:  CP.B    W4L,#A
004D0:  BRA     NC,4E4
004D2:  MOV     804,W4
004D4:  LSR     W4,#8,W4
004D6:  CP.B    W4L,#A
004D8:  BRA     NC,4E4
004DA:  MOV     806,W4
004DC:  CP.B    W4L,#A
004DE:  BRA     NC,4E4
004E0:  MOV.B   #1,W0L
004E2:  MOV.B   W0L,807
....................    if(dat1 > 0)dat1 --; 
004E4:  CP0.B   804
004E6:  BRA     Z,4EA
004E8:  DEC.B   0804
....................    if(dat2 > 0)dat2 --; 
004EA:  CP0.B   805
004EC:  BRA     Z,4F0
004EE:  DEC.B   0805
....................    if(dat3 > 0)dat3 --; 
004F0:  CP0.B   806
004F2:  BRA     Z,4F6
004F4:  DEC.B   0806
....................    if((dat1 == 0)||(dat2 == 0)||(dat3 == 0))data = 0; 
004F6:  CP0.B   804
004F8:  BRA     Z,502
004FA:  CP0.B   805
004FC:  BRA     Z,502
004FE:  CP0.B   806
00500:  BRA     NZ,504
00502:  CLR.B   807
....................    return(data); 
00504:  MOV.B   807,W0L
00506:  MOV     [--W15],W8
00508:  MOV     [--W15],W7
0050A:  MOV     [--W15],W6
0050C:  MOV     [--W15],W5
0050E:  RETURN  
.................... } 
.................... void control_button (void) 
*
01414:  MOV     W5,[W15++]
.................... { 
....................    if(input(MD) == 0){setup_mode ++;delay_ms(200);if(setup_mode > 2)setup_mode = 0;} 
01416:  BSET.B  2E5.6
01418:  BTSC.B  2E7.6
0141A:  BRA     142C
0141C:  INC.B   080E
0141E:  MOV     #C8,W0
01420:  CALL    338
01424:  MOV     80E,W4
01426:  CP.B    W4L,#2
01428:  BRA     LEU,142C
0142A:  CLR.B   80E
....................    if(setup_mode != 0) 
0142C:  CP0.B   80E
0142E:  BRA     Z,14E4
....................    { 
....................       if(setup_mode == 1) 
01430:  MOV     80E,W4
01432:  CP.B    W4L,#1
01434:  BRA     NZ,14DA
....................       {  
....................          if(input(UP) ==0){power_on = 1;power_on_5V = 1;power_on_12V = 1;power_on_5V_ = 1;power_on_12V_ = 1;} 
01436:  BSET.B  2E5.7
01438:  BTSC.B  2E7.7
0143A:  BRA     1450
0143C:  MOV.B   #1,W0L
0143E:  MOV.B   W0L,80C
01440:  MOV.B   #1,W0L
01442:  MOV.B   W0L,808
01444:  MOV.B   #1,W0L
01446:  MOV.B   W0L,809
01448:  MOV.B   #1,W0L
0144A:  MOV.B   W0L,80A
0144C:  MOV.B   #1,W0L
0144E:  MOV.B   W0L,80B
....................          if(input(DW) ==0){power_on = 0;power_on_5V = 0;power_on_12V = 0;power_on_5V_ = 0;power_on_12V_ = 0;} 
01450:  BSET.B  2E5.4
01452:  BTSC.B  2E7.4
01454:  BRA     1460
01456:  CLR.B   80C
01458:  CLR.B   808
0145A:  CLR.B   809
0145C:  CLR.B   80A
0145E:  CLR.B   80B
....................          lcd_gotoxy(0,0); 
01460:  CLR.B   87E
01462:  CLR.B   87F
01464:  CALL    CE2
....................          printf(lcd_putchar,"SETUP PS ON/OFF:");  
01468:  MOV     #0,W1
0146A:  MOV     W1,W0
0146C:  CLR.B   1
0146E:  CALL    25A
01472:  INC     W1,W1
01474:  MOV     W1,[W15++]
01476:  MOV     W0,886
01478:  CALL    D2C
0147C:  MOV     [--W15],W1
0147E:  MOV     #F,W0
01480:  CPSGT   W1,W0
01482:  BRA     146A
....................          if(power_on == 0){lcd_gotoxy(0,1);printf(lcd_putchar,"POWER: OFF        ");} 
01484:  CP0.B   80C
01486:  BRA     NZ,14AE
01488:  CLR.B   87E
0148A:  MOV.B   #1,W0L
0148C:  MOV.B   W0L,87F
0148E:  CALL    CE2
01492:  MOV     #0,W1
01494:  MOV     W1,W0
01496:  CLR.B   1
01498:  CALL    278
0149C:  INC     W1,W1
0149E:  MOV     W1,[W15++]
014A0:  MOV     W0,886
014A2:  CALL    D2C
014A6:  MOV     [--W15],W1
014A8:  MOV     #11,W0
014AA:  CPSGT   W1,W0
014AC:  BRA     1494
....................          if(power_on == 1){lcd_gotoxy(0,1);printf(lcd_putchar,"POWER: ON         ");} 
014AE:  MOV     80C,W4
014B0:  CP.B    W4L,#1
014B2:  BRA     NZ,14DA
014B4:  CLR.B   87E
014B6:  MOV.B   #1,W0L
014B8:  MOV.B   W0L,87F
014BA:  CALL    CE2
014BE:  MOV     #0,W1
014C0:  MOV     W1,W0
014C2:  CLR.B   1
014C4:  CALL    298
014C8:  INC     W1,W1
014CA:  MOV     W1,[W15++]
014CC:  MOV     W0,886
014CE:  CALL    D2C
014D2:  MOV     [--W15],W1
014D4:  MOV     #11,W0
014D6:  CPSGT   W1,W0
014D8:  BRA     14C0
....................       } 
....................       if(setup_mode == 2) 
014DA:  MOV     80E,W4
014DC:  CP.B    W4L,#2
014DE:  BRA     NZ,14E4
....................       {  
....................          Read_current(); 
014E0:  CALL    110C
....................       } 
....................    } 
....................    if(input(EX) == 0)setup_mode = 0; 
014E4:  BSET.B  2E5.5
014E6:  BTSC.B  2E7.5
014E8:  BRA     14EC
014EA:  CLR.B   80E
014EC:  MOV     [--W15],W5
014EE:  RETURN  
.................... } 
.................... Void Read_current (void) 
*
0110C:  MOV     W5,[W15++]
0110E:  MOV     W6,[W15++]
01110:  MOV     W7,[W15++]
.................... { 
....................    val_adc1 = multi_read_adc(18,1000); 
01112:  MOV.B   #12,W0L
01114:  MOV.B   W0L,87E
01116:  MOV     #3E8,W4
01118:  MOV     W4,880
0111A:  CALL    D92
0111E:  MOV     W0,810
....................    val_adc2 = multi_read_adc(19,1000); 
01120:  MOV.B   #13,W0L
01122:  MOV.B   W0L,87E
01124:  MOV     #3E8,W4
01126:  MOV     W4,880
01128:  CALL    D92
0112C:  MOV     W0,812
....................    /*Device 1 
....................    if(val_adc1 >= 1897){curren_displayA = (val_adc1 - 1897)/0.694;flag_currA = 0;} 
....................    if(val_adc1 < 1897){curren_displayA = (1897 - val_adc1)/0.852;flag_currA = 1;} 
....................    if(val_adc2 >= 1890){curren_displayB = (val_adc2 - 1890)/0.694;flag_currB = 0;} 
....................    if(val_adc2 < 1890){curren_displayB = (1890 - val_adc2)/0.852;flag_currB = 1;} 
....................    */ 
....................    /*Device 2 
....................    if(val_adc1 >= 1887){curren_displayA = (val_adc1 - 1887)/0.694;flag_currA = 0;} 
....................    if(val_adc1 < 1887){curren_displayA = (1887 - val_adc1)/0.8287;flag_currA = 1;} 
....................    if(val_adc2 >= 1879){curren_displayB = (val_adc2 - 1879)/0.694;flag_currB = 0;} 
....................    if(val_adc2 < 1879){curren_displayB = (1879 - val_adc2)/0.8287;flag_currB = 1;} 
....................    */ 
....................    /*Device 3 
....................    if(val_adc1 >= 1887){curren_displayA = (val_adc1 - 1887)/0.694;flag_currA = 0;} 
....................    if(val_adc1 < 1887){curren_displayA = (1887 - val_adc1)/0.8585;flag_currA = 1;} 
....................    if(val_adc2 >= 1880){curren_displayB = (val_adc2 - 1880)/0.694;flag_currB = 0;} 
....................    if(val_adc2 < 1880){curren_displayB = (1880 - val_adc2)/0.8436;flag_currB = 1;} 
....................    */ 
....................    /*Device 4 
....................    if(val_adc1 >= 1894){curren_displayA = (val_adc1 - 1894)/0.6448;flag_currA = 0;} 
....................    if(val_adc1 < 1894){curren_displayA = (1894 - val_adc1)/0.9045;flag_currA = 1;} 
....................    if(val_adc2 >= 1881){curren_displayB = (val_adc2 - 1881)/0.6325;flag_currB = 0;} 
....................    if(val_adc2 < 1881){curren_displayB = (1881 - val_adc2)/0.8786;flag_currB = 1;} 
....................    */ 
....................    if(val_adc1 >= 1888){curren_displayA = (val_adc1 - 1888)/0.6736;flag_currA = 0;} 
0112E:  MOV     810,W4
01130:  MOV     #760,W3
01132:  CP      W3,W4
01134:  BRA     GTU,1160
01136:  MOV     810,W4
01138:  MOV     #760,W3
0113A:  SUB     W4,W3,W5
0113C:  MOV     W5,W0
0113E:  MOV     #0,W1
01140:  MOV     #0,W2
01142:  MOV     #0,W3
01144:  CALL    E18
01148:  MOV     W5,[W15++]
0114A:  MOV     #BD3C,W4
0114C:  MOV     #9652,W5
0114E:  MOV     #8E21,W6
01150:  MOV     #3FE5,W7
01152:  CALL    E82
01156:  MOV     [--W15],W5
01158:  CALL    F8A
0115C:  MOV     W0,814
0115E:  CLR.B   80F
....................    if(val_adc1 < 1888){curren_displayA = (1888 - val_adc1)/0.8538;flag_currA = 1;} 
01160:  MOV     810,W4
01162:  MOV     #760,W3
01164:  CP      W3,W4
01166:  BRA     LEU,1194
01168:  MOV     #760,W4
0116A:  MOV     810,W3
0116C:  SUB     W4,W3,W5
0116E:  MOV     W5,W0
01170:  MOV     #0,W1
01172:  MOV     #0,W2
01174:  MOV     #0,W3
01176:  CALL    E18
0117A:  MOV     W5,[W15++]
0117C:  MOV     #64C4,W4
0117E:  MOV     #60AA,W5
01180:  MOV     #5254,W6
01182:  MOV     #3FEB,W7
01184:  CALL    E82
01188:  MOV     [--W15],W5
0118A:  CALL    F8A
0118E:  MOV     W0,814
01190:  MOV.B   #1,W0L
01192:  MOV.B   W0L,80F
....................    if(val_adc2 >= 1877){curren_displayB = (val_adc2 - 1877)/0.6785;flag_currB = 0;} 
01194:  MOV     812,W4
01196:  MOV     #755,W3
01198:  CP      W3,W4
0119A:  BRA     GTU,11C6
0119C:  MOV     812,W4
0119E:  MOV     #755,W3
011A0:  SUB     W4,W3,W5
011A2:  MOV     W5,W0
011A4:  MOV     #0,W1
011A6:  MOV     #0,W2
011A8:  MOV     #0,W3
011AA:  CALL    E18
011AE:  MOV     W5,[W15++]
011B0:  MOV     #C082,W4
011B2:  MOV     #A1CA,W5
011B4:  MOV     #B645,W6
011B6:  MOV     #3FE5,W7
011B8:  CALL    E82
011BC:  MOV     [--W15],W5
011BE:  CALL    F8A
011C2:  MOV     W0,816
011C4:  CLR.B   818
....................    if(val_adc2 < 1877){curren_displayB = (1877 - val_adc2)/0.8548;flag_currB = 1;} 
011C6:  MOV     812,W4
011C8:  MOV     #755,W3
011CA:  CP      W3,W4
011CC:  BRA     LEU,11FA
011CE:  MOV     #755,W4
011D0:  MOV     812,W3
011D2:  SUB     W4,W3,W5
011D4:  MOV     W5,W0
011D6:  MOV     #0,W1
011D8:  MOV     #0,W2
011DA:  MOV     #0,W3
011DC:  CALL    E18
011E0:  MOV     W5,[W15++]
011E2:  MOV     #DD99,W4
011E4:  MOV     #8793,W5
011E6:  MOV     #5A85,W6
011E8:  MOV     #3FEB,W7
011EA:  CALL    E82
011EE:  MOV     [--W15],W5
011F0:  CALL    F8A
011F4:  MOV     W0,816
011F6:  MOV.B   #1,W0L
011F8:  MOV.B   W0L,818
....................     
....................    if(flag_currA == 0){lcd_gotoxy(0,0);printf(lcd_putchar,"AMETER I1: %d.%d%dA",curren_displayA/100,(curren_displayA%100)/10,(curren_displayA%100)%10);}  
011FA:  CP0.B   80F
011FC:  BRA     NZ,127C
011FE:  CLR.B   87E
01200:  CLR.B   87F
01202:  CALL    CE2
01206:  MOV     814,W4
01208:  MOV     #64,W3
0120A:  REPEAT  #11
0120C:  DIV.U   W4,W3
0120E:  MOV     W0,W5
01210:  MOV     814,W4
01212:  MOV     #64,W3
01214:  REPEAT  #11
01216:  DIV.U   W4,W3
01218:  MOV     W1,W6
0121A:  MOV     W6,W4
0121C:  MOV     #A,W3
0121E:  REPEAT  #11
01220:  DIV.U   W4,W3
01222:  MOV     W0,W6
01224:  MOV     814,W4
01226:  MOV     #64,W3
01228:  REPEAT  #11
0122A:  DIV.U   W4,W3
0122C:  MOV     W1,W7
0122E:  MOV     W7,W4
01230:  MOV     #A,W3
01232:  REPEAT  #11
01234:  DIV.U   W4,W3
01236:  MOV     W1,W7
01238:  MOV     #0,W1
0123A:  MOV     W1,W0
0123C:  CLR.B   1
0123E:  CALL    2B8
01242:  INC     W1,W1
01244:  MOV     W1,[W15++]
01246:  MOV     W0,886
01248:  CALL    D2C
0124C:  MOV     [--W15],W1
0124E:  MOV     #A,W0
01250:  CPSGT   W1,W0
01252:  BRA     123A
01254:  MOV     W5,W0
01256:  MOV     #0,W4
01258:  CALL    FE8
0125C:  MOV     #2E,W4
0125E:  MOV     W4,886
01260:  CALL    D2C
01264:  MOV     W6,W0
01266:  MOV     #0,W4
01268:  CALL    FE8
0126C:  MOV     W7,W0
0126E:  MOV     #0,W4
01270:  CALL    FE8
01274:  MOV     #41,W4
01276:  MOV     W4,886
01278:  CALL    D2C
....................    if(flag_currA == 1){lcd_gotoxy(0,0);printf(lcd_putchar,"AMETER I1:-%d.%d%dA",curren_displayA/100,(curren_displayA%100)/10,(curren_displayA%100)%10);}  
0127C:  MOV     80E,W4
0127E:  LSR     W4,#8,W4
01280:  CP.B    W4L,#1
01282:  BRA     NZ,1302
01284:  CLR.B   87E
01286:  CLR.B   87F
01288:  CALL    CE2
0128C:  MOV     814,W4
0128E:  MOV     #64,W3
01290:  REPEAT  #11
01292:  DIV.U   W4,W3
01294:  MOV     W0,W5
01296:  MOV     814,W4
01298:  MOV     #64,W3
0129A:  REPEAT  #11
0129C:  DIV.U   W4,W3
0129E:  MOV     W1,W6
012A0:  MOV     W6,W4
012A2:  MOV     #A,W3
012A4:  REPEAT  #11
012A6:  DIV.U   W4,W3
012A8:  MOV     W0,W6
012AA:  MOV     814,W4
012AC:  MOV     #64,W3
012AE:  REPEAT  #11
012B0:  DIV.U   W4,W3
012B2:  MOV     W1,W7
012B4:  MOV     W7,W4
012B6:  MOV     #A,W3
012B8:  REPEAT  #11
012BA:  DIV.U   W4,W3
012BC:  MOV     W1,W7
012BE:  MOV     #0,W1
012C0:  MOV     W1,W0
012C2:  CLR.B   1
012C4:  CALL    2D8
012C8:  INC     W1,W1
012CA:  MOV     W1,[W15++]
012CC:  MOV     W0,886
012CE:  CALL    D2C
012D2:  MOV     [--W15],W1
012D4:  MOV     #A,W0
012D6:  CPSGT   W1,W0
012D8:  BRA     12C0
012DA:  MOV     W5,W0
012DC:  MOV     #0,W4
012DE:  CALL    FE8
012E2:  MOV     #2E,W4
012E4:  MOV     W4,886
012E6:  CALL    D2C
012EA:  MOV     W6,W0
012EC:  MOV     #0,W4
012EE:  CALL    FE8
012F2:  MOV     W7,W0
012F4:  MOV     #0,W4
012F6:  CALL    FE8
012FA:  MOV     #41,W4
012FC:  MOV     W4,886
012FE:  CALL    D2C
....................    if(flag_currB == 0){lcd_gotoxy(0,1);printf(lcd_putchar,"AMETER I2: %d.%d%dA",curren_displayB/100,(curren_displayB%100)/10,(curren_displayB%100)%10);} 
01302:  CP0.B   818
01304:  BRA     NZ,1386
01306:  CLR.B   87E
01308:  MOV.B   #1,W0L
0130A:  MOV.B   W0L,87F
0130C:  CALL    CE2
01310:  MOV     816,W4
01312:  MOV     #64,W3
01314:  REPEAT  #11
01316:  DIV.U   W4,W3
01318:  MOV     W0,W5
0131A:  MOV     816,W4
0131C:  MOV     #64,W3
0131E:  REPEAT  #11
01320:  DIV.U   W4,W3
01322:  MOV     W1,W6
01324:  MOV     W6,W4
01326:  MOV     #A,W3
01328:  REPEAT  #11
0132A:  DIV.U   W4,W3
0132C:  MOV     W0,W6
0132E:  MOV     816,W4
01330:  MOV     #64,W3
01332:  REPEAT  #11
01334:  DIV.U   W4,W3
01336:  MOV     W1,W7
01338:  MOV     W7,W4
0133A:  MOV     #A,W3
0133C:  REPEAT  #11
0133E:  DIV.U   W4,W3
01340:  MOV     W1,W7
01342:  MOV     #0,W1
01344:  MOV     W1,W0
01346:  CLR.B   1
01348:  CALL    2F8
0134C:  INC     W1,W1
0134E:  MOV     W1,[W15++]
01350:  MOV     W0,886
01352:  CALL    D2C
01356:  MOV     [--W15],W1
01358:  MOV     #A,W0
0135A:  CPSGT   W1,W0
0135C:  BRA     1344
0135E:  MOV     W5,W0
01360:  MOV     #0,W4
01362:  CALL    FE8
01366:  MOV     #2E,W4
01368:  MOV     W4,886
0136A:  CALL    D2C
0136E:  MOV     W6,W0
01370:  MOV     #0,W4
01372:  CALL    FE8
01376:  MOV     W7,W0
01378:  MOV     #0,W4
0137A:  CALL    FE8
0137E:  MOV     #41,W4
01380:  MOV     W4,886
01382:  CALL    D2C
....................    if(flag_currB == 1){lcd_gotoxy(0,1);printf(lcd_putchar,"AMETER I2:-%d.%d%dA",curren_displayB/100,(curren_displayB%100)/10,(curren_displayB%100)%10);} 
01386:  MOV     818,W4
01388:  CP.B    W4L,#1
0138A:  BRA     NZ,140C
0138C:  CLR.B   87E
0138E:  MOV.B   #1,W0L
01390:  MOV.B   W0L,87F
01392:  CALL    CE2
01396:  MOV     816,W4
01398:  MOV     #64,W3
0139A:  REPEAT  #11
0139C:  DIV.U   W4,W3
0139E:  MOV     W0,W5
013A0:  MOV     816,W4
013A2:  MOV     #64,W3
013A4:  REPEAT  #11
013A6:  DIV.U   W4,W3
013A8:  MOV     W1,W6
013AA:  MOV     W6,W4
013AC:  MOV     #A,W3
013AE:  REPEAT  #11
013B0:  DIV.U   W4,W3
013B2:  MOV     W0,W6
013B4:  MOV     816,W4
013B6:  MOV     #64,W3
013B8:  REPEAT  #11
013BA:  DIV.U   W4,W3
013BC:  MOV     W1,W7
013BE:  MOV     W7,W4
013C0:  MOV     #A,W3
013C2:  REPEAT  #11
013C4:  DIV.U   W4,W3
013C6:  MOV     W1,W7
013C8:  MOV     #0,W1
013CA:  MOV     W1,W0
013CC:  CLR.B   1
013CE:  CALL    318
013D2:  INC     W1,W1
013D4:  MOV     W1,[W15++]
013D6:  MOV     W0,886
013D8:  CALL    D2C
013DC:  MOV     [--W15],W1
013DE:  MOV     #A,W0
013E0:  CPSGT   W1,W0
013E2:  BRA     13CA
013E4:  MOV     W5,W0
013E6:  MOV     #0,W4
013E8:  CALL    FE8
013EC:  MOV     #2E,W4
013EE:  MOV     W4,886
013F0:  CALL    D2C
013F4:  MOV     W6,W0
013F6:  MOV     #0,W4
013F8:  CALL    FE8
013FC:  MOV     W7,W0
013FE:  MOV     #0,W4
01400:  CALL    FE8
01404:  MOV     #41,W4
01406:  MOV     W4,886
01408:  CALL    D2C
0140C:  MOV     [--W15],W7
0140E:  MOV     [--W15],W6
01410:  MOV     [--W15],W5
01412:  RETURN  
.................... } 
.................... unsigned int16 multi_read_adc (unsigned int8 channel,unsigned int16 samling) 
*
00D92:  MOV     W5,[W15++]
00D94:  MOV     W6,[W15++]
.................... { 
....................    unsigned int16 val_adc,val_return; 
....................    unsigned int32 val_convert; 
....................    unsigned int16 i; 
....................    for(i = 0;i < samling;i ++) 
00D96:  CLR     88A
00D98:  MOV     88A,W0
00D9A:  MOV     880,W4
00D9C:  CP      W4,W0
00D9E:  BRA     LEU,DD0
....................    { 
....................       set_adc_channel (channel); 
00DA0:  MOV.B   87E,W0L
00DA2:  MOV.B   W0L,328
00DA4:  CLR.B   329
....................       delay_us(10); 
00DA6:  REPEAT  #62
00DA8:  NOP     
....................       val_adc = read_adc(); 
00DAA:  BCLR.B  320.0
00DAC:  BSET.B  320.1
00DAE:  BTSS.B  320.0
00DB0:  BRA     DAE
00DB2:  PUSH    300
00DB4:  POP     882
....................       M[channel] += val_adc; 
00DB6:  MOV.B   87E,W0L
00DB8:  CLR.B   1
00DBA:  SL      W0,#2,W0
00DBC:  MOV     #81A,W4
00DBE:  ADD     W0,W4,W5
00DC0:  MOV     [W5],W0
00DC2:  ADD     882,W0
00DC4:  MOV     W0,[W5]
00DC6:  MOV     [++W5],W4
00DC8:  ADDC    W4,#0,[W5]
00DCA:  INC     088A
00DCC:  GOTO    D98
....................    } 
....................    val_convert = M[channel]/samling; 
00DD0:  MOV.B   87E,W0L
00DD2:  CLR.B   1
00DD4:  SL      W0,#2,W0
00DD6:  MOV     #81A,W4
00DD8:  ADD     W0,W4,W0
00DDA:  MOV     #A,W4
00DDC:  MOV     [W0++],[W4++]
00DDE:  MOV     [W0++],[W4++]
00DE0:  BCLR.B  43.0
00DE2:  MOV     W5,W0
00DE4:  MOV     W6,W1
00DE6:  MOV     880,W2
00DE8:  MOV     #0,W3
00DEA:  CALL    D3E
00DEE:  MOV     W0,886
00DF0:  MOV     W1,888
....................    M[channel] = 0; 
00DF2:  MOV.B   87E,W0L
00DF4:  CLR.B   1
00DF6:  SL      W0,#2,W0
00DF8:  MOV     #81A,W4
00DFA:  ADD     W0,W4,W5
00DFC:  CLR.B   [W5]
00DFE:  MOV.B   #0,W0L
00E00:  MOV.B   W0L,[W5+#1]
00E02:  MOV.B   #0,W0L
00E04:  MOV.B   W0L,[W5+#2]
00E06:  MOV.B   #0,W0L
00E08:  MOV.B   W0L,[W5+#3]
....................    val_return = val_convert; 
00E0A:  PUSH    886
00E0C:  POP     884
....................    return (val_return); 
00E0E:  PUSH    884
00E10:  POP     0
00E12:  MOV     [--W15],W6
00E14:  MOV     [--W15],W5
00E16:  RETURN  
.................... } 

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0082   PR IESO
          H: 0000  
   Word  5L: 0006   HS NOOSCIO CKSFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E7   PUT128 LPOL_HIGH HPOL_HIGH NOPWMPIN
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
